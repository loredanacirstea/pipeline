const treedata = [{"_id":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e","id":"5_15462","dtypeid":null,"data":{"name":"CustomToken","license":"None","gapi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"supply","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"multiplier","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"decimals","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"transferFunds","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner_address","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"mint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"},{"name":"target","type":"address"}],"name":"mintFor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initial_supply","type":"uint256"},{"name":"decimal_units","type":"uint8"},{"name":"token_name","type":"string"},{"name":"token_symbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":true,"name":"_num","type":"uint256"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}],"sourceByLanguage":{"0":{"sourcesTemp":{"CustomToken":"/**\n *Submitted for verification at Etherscan.io on 2019-07-26\n*/\n\npragma solidity 0.5.4;\n\n/*\nThis Token Contract implements the standard token functionality (https://github.com/ethereum/EIPs/issues/20), the ERC223 functionality (https://github.com/ethereum/EIPs/issues/223) as well as the following OPTIONAL extras intended for use by humans.\n\nIn other words. This is intended for deployment in something like a Token Factory or Mist wallet, and then used by humans.\nImagine coins, currencies, shares, voting weight, etc.\nMachine-based, rapid creation of many tokens would not necessarily need these extra features or will be minted in other manners.\n\n1) Initial Finite Supply (upon creation one specifies how much is minted).\n2) In the absence of a token registry: Optional Decimal, Symbol & Name.\n\n.*/\n\n\ninterface Token {\n\n    /// @return total amount of tokens\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // Optionally implemented function to show the number of decimals for the token\n    function decimals() external view returns (uint8 decimals);\n}\n\n\n/*\nThis implements ONLY the standard functions and NOTHING else.\nFor a token like you would want to deploy in something like Mist, see HumanStandardToken.sol.\n\nIf you deploy this, you won't have anything useful.\n\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n.*/\n\ncontract StandardToken is Token {\n    uint256 internal _total_supply;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        require(_value > 0);\n        if ((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (_value > 0)) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    function totalSupply() public view returns (uint256 supply) {\n        return _total_supply;\n    }\n}\n\n\n/// @title CustomToken\ncontract CustomToken is StandardToken {\n\n    /*\n     *  Token metadata\n     */\n    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n    string public name;\n    string public symbol;\n    uint8 public _decimals;\n    uint256 public multiplier;\n\n    address payable public owner_address;\n\n    /*\n     * Events\n     */\n    event Minted(address indexed _to, uint256 indexed _num);\n\n    /*\n     *  Public functions\n     */\n    /// @dev Contract constructor function.\n    /// @param initial_supply Initial supply of tokens.\n    /// @param decimal_units Number of token decimals.\n    /// @param token_name Token name for display.\n    /// @param token_symbol Token symbol.\n    constructor(\n        uint256 initial_supply,\n        uint8 decimal_units,\n        string memory token_name,\n        string memory token_symbol\n    )\n        public\n    {\n        // Set the name for display purposes\n        name = token_name;\n\n        // Amount of decimals for display purposes\n        _decimals = decimal_units;\n        multiplier = 10**(uint256(decimal_units));\n\n        // Set the symbol for display purposes\n        symbol = token_symbol;\n\n        // Initial supply is assigned to the owner\n        owner_address = msg.sender;\n        balances[owner_address] = initial_supply;\n        _total_supply = initial_supply;\n    }\n\n    /// @notice Allows `num` tokens to be minted and assigned to `msg.sender`\n    function mint(uint256 num) public {\n        mintFor(num, msg.sender);\n    }\n\n    /// @notice Allows `num` tokens to be minted and assigned to `target`\n    function mintFor(uint256 num, address target) public {\n        balances[target] += num;\n        _total_supply += num;\n\n        emit Minted(target, num);\n\n        require(balances[target] >= num);\n        assert(_total_supply >= num);\n    }\n\n    /// @notice Transfers the collected ETH to the contract owner.\n    function transferFunds() public {\n        require(msg.sender == owner_address);\n        require(address(this).balance > 0);\n\n        owner_address.transfer(address(this).balance);\n        assert(address(this).balance == 0);\n    }\n\n    function decimals() public view returns (uint8 decimals) {\n        return _decimals;\n    }\n}"},"compiler":{"name":"solc","version":"v0.5.4+commit.9549d8ff","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"false","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"60806040526040805190810160405280600481526020017f48302e3100000000000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000253565b503480156200005f57600080fd5b50604051620014d6380380620014d6833981018060405260808110156200008557600080fd5b8101908080519060200190929190805190602001909291908051640100000000811115620000b257600080fd5b82810190506020810184811115620000c957600080fd5b8151856001820283011164010000000082111715620000e757600080fd5b505092919060200180516401000000008111156200010457600080fd5b828101905060208101848111156200011b57600080fd5b81518560018202830111640100000000821117156200013957600080fd5b505092919050505081600490805190602001906200015992919062000253565b5082600660006101000a81548160ff021916908360ff1602179055508260ff16600a0a60078190555080600590805190602001906200019a92919062000253565b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055505050505062000302565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029657805160ff1916838001178555620002c7565b82800160010185558215620002c7579182015b82811115620002c6578251825591602001919060010190620002a9565b5b509050620002d69190620002da565b5090565b620002ff91905b80821115620002fb576000816000905550600101620002e1565b5090565b90565b6111c480620003126000396000f3fe608060405234801561001057600080fd5b5060043610610128576000357c0100000000000000000000000000000000000000000000000000000000900480633c68eb81116100bf57806395d89b411161008e57806395d89b41146104a7578063a0712d681461052a578063a9059cbb14610558578063ad62f1ca146105be578063dd62ed3e1461060c57610128565b80633c68eb811461037857806354fd4d501461038257806370a082311461040557806380edef8e1461045d57610128565b806323b872dd116100fb57806323b872dd1461025257806327e235e3146102d8578063313ce5671461033057806332424aa31461035457610128565b806306fdde031461012d578063095ea7b3146101b057806318160ddd146102165780631b3ed72214610234575b600080fd5b610135610684565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fc600480360360408110156101c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610722565b604051808215151515815260200191505060405180910390f35b61021e610814565b6040518082815260200191505060405180910390f35b61023c61081d565b6040518082815260200191505060405180910390f35b6102be6004803603606081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610823565b604051808215151515815260200191505060405180910390f35b61031a600480360360208110156102ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b87565b6040518082815260200191505060405180910390f35b610338610b9f565b604051808260ff1660ff16815260200191505060405180910390f35b61035c610bb6565b604051808260ff1660ff16815260200191505060405180910390f35b610380610bc9565b005b61038a610cf0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ca5780820151818401526020810190506103af565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104476004803603602081101561041b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d8e565b6040518082815260200191505060405180910390f35b610465610dd7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104af610dfd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401526020810190506104d4565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105566004803603602081101561054057600080fd5b8101908080359060200190929190505050610e9b565b005b6105a46004803603604081101561056e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea8565b604051808215151515815260200191505060405180910390f35b61060a600480360360408110156105d457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611011565b005b61066e6004803603604081101561062257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611111565b6040518082815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071a5780601f106106ef5761010080835404028352916020019161071a565b820191906000526020600020905b8154815290600101906020018083116106fd57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60075481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087357600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108fe57600080fd5b60008211151561090d57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109d8575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156109e45750600082115b15610b7b5781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610b80565b600090505b9392505050565b60016020528060005260406000206000915090505481565b6000600660009054906101000a900460ff16905090565b600660009054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2557600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515610c4b57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610cca573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631141515610cee57fe5b565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d865780601f10610d5b57610100808354040283529160200191610d86565b820191906000526020600020905b815481529060010190602001808311610d6957829003601f168201915b505050505081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e935780601f10610e6857610100808354040283529160200191610e93565b820191906000526020600020905b815481529060010190602001808311610e7657829003601f168201915b505050505081565b610ea58133611011565b50565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ef95750600082115b156110065781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061100b565b600090505b92915050565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808282540192505081905550818173ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a381600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110ff57600080fd5b816000541015151561110d57fe5b5050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509291505056fea165627a7a72305820e3289fcdd1db772d229efe6866b098ec7e3f97dc5b0a43fb7b17bde8691de9000029000000000000000000000000000000000000000000a56fa5b99019a5c80000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b57697a617264546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000357495a0000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"5485:2313:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5485:2313:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5675:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5675:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:214;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4981:214:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5353:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5756:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4017:833;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4017:833:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3211:44;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3211:44:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7703:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5727:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7460:235;;;:::i;:::-;;5573:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5573:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:115;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4858:115:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5790:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5700:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5700:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6977:77;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6977:77:0;;;;;;;;;;;;;;;;;:::i;:::-;;3328:681;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3328:681:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7137:247;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7137:247:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5203:142;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5203:142:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5675:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4981:214::-;5048:12;5105:6;5073:7;:19;5081:10;5073:19;;;;;;;;;;;;;;;:29;5093:8;5073:29;;;;;;;;;;;;;;;:38;;;;5148:8;5127:38;;5136:10;5127:38;;;5158:6;5127:38;;;;;;;;;;;;;;;;;;5183:4;5176:11;;4981:214;;;;:::o;5353:99::-;5397:14;5431:13;;5424:20;;5353:99;:::o;5756:25::-;;;;:::o;4017:833::-;4117:12;4410:6;4391:8;:15;4400:5;4391:15;;;;;;;;;;;;;;;;:25;;4383:34;;;;;;;;4466:6;4436:7;:14;4444:5;4436:14;;;;;;;;;;;;;;;:26;4451:10;4436:26;;;;;;;;;;;;;;;;:36;;4428:45;;;;;;;;4501:1;4492:6;:10;4484:19;;;;;;;;4538:6;4519:8;:15;4528:5;4519:15;;;;;;;;;;;;;;;;:25;;4518:69;;;;;4580:6;4550:7;:14;4558:5;4550:14;;;;;;;;;;;;;;;:26;4565:10;4550:26;;;;;;;;;;;;;;;;:36;;4518:69;:85;;;;;4601:1;4592:6;:10;4518:85;4514:329;;;4637:6;4620:8;:13;4629:3;4620:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;4677:6;4658:8;:15;4667:5;4658:15;;;;;;;;;;;;;;;;:25;;;;;;;;;;;4728:6;4698:7;:14;4706:5;4698:14;;;;;;;;;;;;;;;:26;4713:10;4698:26;;;;;;;;;;;;;;;;:36;;;;;;;;;;;4770:3;4754:28;;4763:5;4754:28;;;4775:6;4754:28;;;;;;;;;;;;;;;;;;4804:4;4797:11;;;;4514:329;4835:5;4828:12;;4017:833;;;;;;:::o;3211:44::-;;;;;;;;;;;;;;;;;:::o;7703:92::-;7744:14;7778:9;;;;;;;;;;;7771:16;;7703:92;:::o;5727:22::-;;;;;;;;;;;;;:::o;7460:235::-;7525:13;;;;;;;;;;;7511:27;;:10;:27;;;7503:36;;;;;;;;7582:1;7566:4;7558:21;;;:25;7550:34;;;;;;;;7597:13;;;;;;;;;;;:22;;:45;7628:4;7620:21;;;7597:45;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7597:45:0;7685:1;7668:4;7660:21;;;:26;7653:34;;;;;;7460:235::o;5573:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4858:115::-;4914:15;4949:8;:16;4958:6;4949:16;;;;;;;;;;;;;;;;4942:23;;4858:115;;;:::o;5790:36::-;;;;;;;;;;;;;:::o;5700:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6977:77::-;7022:24;7030:3;7035:10;7022:7;:24::i;:::-;6977:77;:::o;3328:681::-;3391:12;3783:6;3759:8;:20;3768:10;3759:20;;;;;;;;;;;;;;;;:30;;:44;;;;;3802:1;3793:6;:10;3759:44;3755:247;;;3844:6;3820:8;:20;3829:10;3820:20;;;;;;;;;;;;;;;;:30;;;;;;;;;;;3882:6;3865:8;:13;3874:3;3865:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;3929:3;3908:33;;3917:10;3908:33;;;3934:6;3908:33;;;;;;;;;;;;;;;;;;3963:4;3956:11;;;;3755:247;3994:5;3987:12;;3328:681;;;;;:::o;7137:247::-;7221:3;7201:8;:16;7210:6;7201:16;;;;;;;;;;;;;;;;:23;;;;;;;;;;;7252:3;7235:13;;:20;;;;;;;;;;;7288:3;7280:6;7273:19;;;;;;;;;;;;7333:3;7313:8;:16;7322:6;7313:16;;;;;;;;;;;;;;;;:23;;7305:32;;;;;;;;7372:3;7355:13;;:20;;7348:28;;;;;;7137:247;;:::o;5203:142::-;5277:17;5312:7;:15;5320:6;5312:15;;;;;;;;;;;;;;;:25;5328:8;5312:25;;;;;;;;;;;;;;;;5305:32;;5203:142;;;;:::o"}}}}}},"metadata":{"chainids":[5],"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:14:22.000Z","ppackageid":null,"pfunctions":[{"_id":"256681b7-f37f-414e-b518-1cce96ea4c0e","dtypeid":null,"graphid":null,"data":{"name":"mintFor","signature":"0xad62f1ca","signatureString":"mintFor(uint256,address)","gapi":{"constant":false,"inputs":[{"name":"num","type":"uint256"},{"name":"target","type":"address"}],"name":"mintFor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"35216ff9-7714-436f-a336-432979a688c8","dtypeid":null,"graphid":null,"data":{"name":"allowance","signature":"0xdd62ed3e","signatureString":"allowance(address,address)","gapi":{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"47951766-bc3f-4bc7-a54f-b73debc82ec2","dtypeid":null,"graphid":null,"data":{"signature":"0x302d7575","signatureString":"(uint256,uint8,string,string)","gapi":{"inputs":[{"name":"initial_supply","type":"uint256"},{"name":"decimal_units","type":"uint8"},{"name":"token_name","type":"string"},{"name":"token_symbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"52285240-c440-4696-8c8c-46748bd9245a","dtypeid":null,"graphid":null,"data":{"name":"Transfer","signature":"0xddf252ad","signatureString":"Transfer(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"57b35a27-ad72-42d7-bcd7-1403fcca2c94","dtypeid":null,"graphid":null,"data":{"name":"totalSupply","signature":"0x18160ddd","signatureString":"totalSupply()","gapi":{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"supply","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"6b6b4caf-3187-4eab-be7c-de2ff03274d5","dtypeid":null,"graphid":null,"data":{"name":"transferFrom","signature":"0x23b872dd","signatureString":"transferFrom(address,address,uint256)","gapi":{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"6ebbac0c-e789-4887-8ffc-98e3e3f17323","dtypeid":null,"graphid":null,"data":{"name":"mint","signature":"0xa0712d68","signatureString":"mint(uint256)","gapi":{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"mint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"85cc69d7-f37f-4cb8-a3f9-e423e0272fde","dtypeid":null,"graphid":null,"data":{"name":"approve","signature":"0x095ea7b3","signatureString":"approve(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"8c1f5dee-b63d-4405-8823-d627431e8ffd","dtypeid":null,"graphid":null,"data":{"name":"symbol","signature":"0x95d89b41","signatureString":"symbol()","gapi":{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"93841c7e-cbe6-48a4-8c7f-b777b3edd23d","dtypeid":null,"graphid":null,"data":{"name":"transferFunds","signature":"0x3c68eb81","signatureString":"transferFunds()","gapi":{"constant":false,"inputs":[],"name":"transferFunds","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"9e15bbf1-da73-47a7-8aa5-1feef5986135","dtypeid":null,"graphid":null,"data":{"name":"_decimals","signature":"0x32424aa3","signatureString":"_decimals()","gapi":{"constant":true,"inputs":[],"name":"_decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"a1cb3d41-aadf-4e0c-adb8-26aad5f3156c","dtypeid":null,"graphid":null,"data":{"name":"decimals","signature":"0x313ce567","signatureString":"decimals()","gapi":{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"decimals","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"a54feda6-d250-4aaa-83f3-e36f0f7c2709","dtypeid":null,"graphid":null,"data":{"name":"Approval","signature":"0x8c5be1e5","signatureString":"Approval(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"ad69678a-4b1f-4999-b0c4-e7c7d12d2bf6","dtypeid":null,"graphid":null,"data":{"name":"name","signature":"0x06fdde03","signatureString":"name()","gapi":{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"ae99ff6f-3f65-4e44-99d0-18dd5537143a","dtypeid":null,"graphid":null,"data":{"name":"owner_address","signature":"0x80edef8e","signatureString":"owner_address()","gapi":{"constant":true,"inputs":[],"name":"owner_address","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"b63246b7-f576-433b-95db-498e820a3dff","dtypeid":null,"graphid":null,"data":{"name":"multiplier","signature":"0x1b3ed722","signatureString":"multiplier()","gapi":{"constant":true,"inputs":[],"name":"multiplier","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"b6af24df-5cf2-4a95-bf81-0d9c1eb4e081","dtypeid":null,"graphid":null,"data":{"name":"balances","signature":"0x27e235e3","signatureString":"balances(address)","gapi":{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"c00d7e9e-b770-4b33-9627-26e0609a9bde","dtypeid":null,"graphid":null,"data":{"name":"balanceOf","signature":"0x70a08231","signatureString":"balanceOf(address)","gapi":{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"c6fb3100-f720-4f71-9b0d-bc790521205b","dtypeid":null,"graphid":null,"data":{"name":"Minted","signature":"0x30385c84","signatureString":"Minted(address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":true,"name":"_num","type":"uint256"}],"name":"Minted","type":"event"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"d16d865f-3a83-4711-971d-8441f512359a","dtypeid":null,"graphid":null,"data":{"name":"version","signature":"0x54fd4d50","signatureString":"version()","gapi":{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"},{"_id":"ee909aab-293a-4e0d-8c46-a6b400e477ac","dtypeid":null,"graphid":null,"data":{"name":"transfer","signature":"0xa9059cbb","signatureString":"transfer(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[5],"categories":["solidity"]},"timestamp":"2020-02-22T10:14:22.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"}],"pclassInstances":[{"_id":"955bc372-01c2-417c-af8d-5f3d02158663","id":502,"pclassid_":"5_15462","ppackageid":null,"dtypeid":null,"data":{"compiler":{"name":"solc","version":"v0.5.4+commit.9549d8ff","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"false","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"60806040526040805190810160405280600481526020017f48302e3100000000000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000253565b503480156200005f57600080fd5b50604051620014d6380380620014d6833981018060405260808110156200008557600080fd5b8101908080519060200190929190805190602001909291908051640100000000811115620000b257600080fd5b82810190506020810184811115620000c957600080fd5b8151856001820283011164010000000082111715620000e757600080fd5b505092919060200180516401000000008111156200010457600080fd5b828101905060208101848111156200011b57600080fd5b81518560018202830111640100000000821117156200013957600080fd5b505092919050505081600490805190602001906200015992919062000253565b5082600660006101000a81548160ff021916908360ff1602179055508260ff16600a0a60078190555080600590805190602001906200019a92919062000253565b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055505050505062000302565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029657805160ff1916838001178555620002c7565b82800160010185558215620002c7579182015b82811115620002c6578251825591602001919060010190620002a9565b5b509050620002d69190620002da565b5090565b620002ff91905b80821115620002fb576000816000905550600101620002e1565b5090565b90565b6111c480620003126000396000f3fe608060405234801561001057600080fd5b5060043610610128576000357c0100000000000000000000000000000000000000000000000000000000900480633c68eb81116100bf57806395d89b411161008e57806395d89b41146104a7578063a0712d681461052a578063a9059cbb14610558578063ad62f1ca146105be578063dd62ed3e1461060c57610128565b80633c68eb811461037857806354fd4d501461038257806370a082311461040557806380edef8e1461045d57610128565b806323b872dd116100fb57806323b872dd1461025257806327e235e3146102d8578063313ce5671461033057806332424aa31461035457610128565b806306fdde031461012d578063095ea7b3146101b057806318160ddd146102165780631b3ed72214610234575b600080fd5b610135610684565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fc600480360360408110156101c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610722565b604051808215151515815260200191505060405180910390f35b61021e610814565b6040518082815260200191505060405180910390f35b61023c61081d565b6040518082815260200191505060405180910390f35b6102be6004803603606081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610823565b604051808215151515815260200191505060405180910390f35b61031a600480360360208110156102ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b87565b6040518082815260200191505060405180910390f35b610338610b9f565b604051808260ff1660ff16815260200191505060405180910390f35b61035c610bb6565b604051808260ff1660ff16815260200191505060405180910390f35b610380610bc9565b005b61038a610cf0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ca5780820151818401526020810190506103af565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104476004803603602081101561041b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d8e565b6040518082815260200191505060405180910390f35b610465610dd7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104af610dfd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401526020810190506104d4565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105566004803603602081101561054057600080fd5b8101908080359060200190929190505050610e9b565b005b6105a46004803603604081101561056e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea8565b604051808215151515815260200191505060405180910390f35b61060a600480360360408110156105d457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611011565b005b61066e6004803603604081101561062257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611111565b6040518082815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071a5780601f106106ef5761010080835404028352916020019161071a565b820191906000526020600020905b8154815290600101906020018083116106fd57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60075481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087357600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156108fe57600080fd5b60008211151561090d57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109d8575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156109e45750600082115b15610b7b5781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610b80565b600090505b9392505050565b60016020528060005260406000206000915090505481565b6000600660009054906101000a900460ff16905090565b600660009054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2557600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515610c4b57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610cca573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631141515610cee57fe5b565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d865780601f10610d5b57610100808354040283529160200191610d86565b820191906000526020600020905b815481529060010190602001808311610d6957829003601f168201915b505050505081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e935780601f10610e6857610100808354040283529160200191610e93565b820191906000526020600020905b815481529060010190602001808311610e7657829003601f168201915b505050505081565b610ea58133611011565b50565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ef95750600082115b156110065781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061100b565b600090505b92915050565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808282540192505081905550818173ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a381600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110ff57600080fd5b816000541015151561110d57fe5b5050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509291505056fea165627a7a72305820e3289fcdd1db772d229efe6866b098ec7e3f97dc5b0a43fb7b17bde8691de9000029000000000000000000000000000000000000000000a56fa5b99019a5c80000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b57697a617264546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000357495a0000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"5485:2313:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5485:2313:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5675:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5675:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:214;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4981:214:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5353:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5756:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4017:833;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4017:833:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3211:44;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3211:44:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7703:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5727:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7460:235;;;:::i;:::-;;5573:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5573:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:115;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4858:115:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5790:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5700:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5700:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6977:77;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6977:77:0;;;;;;;;;;;;;;;;;:::i;:::-;;3328:681;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3328:681:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7137:247;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7137:247:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5203:142;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5203:142:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5675:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4981:214::-;5048:12;5105:6;5073:7;:19;5081:10;5073:19;;;;;;;;;;;;;;;:29;5093:8;5073:29;;;;;;;;;;;;;;;:38;;;;5148:8;5127:38;;5136:10;5127:38;;;5158:6;5127:38;;;;;;;;;;;;;;;;;;5183:4;5176:11;;4981:214;;;;:::o;5353:99::-;5397:14;5431:13;;5424:20;;5353:99;:::o;5756:25::-;;;;:::o;4017:833::-;4117:12;4410:6;4391:8;:15;4400:5;4391:15;;;;;;;;;;;;;;;;:25;;4383:34;;;;;;;;4466:6;4436:7;:14;4444:5;4436:14;;;;;;;;;;;;;;;:26;4451:10;4436:26;;;;;;;;;;;;;;;;:36;;4428:45;;;;;;;;4501:1;4492:6;:10;4484:19;;;;;;;;4538:6;4519:8;:15;4528:5;4519:15;;;;;;;;;;;;;;;;:25;;4518:69;;;;;4580:6;4550:7;:14;4558:5;4550:14;;;;;;;;;;;;;;;:26;4565:10;4550:26;;;;;;;;;;;;;;;;:36;;4518:69;:85;;;;;4601:1;4592:6;:10;4518:85;4514:329;;;4637:6;4620:8;:13;4629:3;4620:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;4677:6;4658:8;:15;4667:5;4658:15;;;;;;;;;;;;;;;;:25;;;;;;;;;;;4728:6;4698:7;:14;4706:5;4698:14;;;;;;;;;;;;;;;:26;4713:10;4698:26;;;;;;;;;;;;;;;;:36;;;;;;;;;;;4770:3;4754:28;;4763:5;4754:28;;;4775:6;4754:28;;;;;;;;;;;;;;;;;;4804:4;4797:11;;;;4514:329;4835:5;4828:12;;4017:833;;;;;;:::o;3211:44::-;;;;;;;;;;;;;;;;;:::o;7703:92::-;7744:14;7778:9;;;;;;;;;;;7771:16;;7703:92;:::o;5727:22::-;;;;;;;;;;;;;:::o;7460:235::-;7525:13;;;;;;;;;;;7511:27;;:10;:27;;;7503:36;;;;;;;;7582:1;7566:4;7558:21;;;:25;7550:34;;;;;;;;7597:13;;;;;;;;;;;:22;;:45;7628:4;7620:21;;;7597:45;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7597:45:0;7685:1;7668:4;7660:21;;;:26;7653:34;;;;;;7460:235::o;5573:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4858:115::-;4914:15;4949:8;:16;4958:6;4949:16;;;;;;;;;;;;;;;;4942:23;;4858:115;;;:::o;5790:36::-;;;;;;;;;;;;;:::o;5700:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6977:77::-;7022:24;7030:3;7035:10;7022:7;:24::i;:::-;6977:77;:::o;3328:681::-;3391:12;3783:6;3759:8;:20;3768:10;3759:20;;;;;;;;;;;;;;;;:30;;:44;;;;;3802:1;3793:6;:10;3759:44;3755:247;;;3844:6;3820:8;:20;3829:10;3820:20;;;;;;;;;;;;;;;;:30;;;;;;;;;;;3882:6;3865:8;:13;3874:3;3865:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;3929:3;3908:33;;3917:10;3908:33;;;3934:6;3908:33;;;;;;;;;;;;;;;;;;3963:4;3956:11;;;;3755:247;3994:5;3987:12;;3328:681;;;;;:::o;7137:247::-;7221:3;7201:8;:16;7210:6;7201:16;;;;;;;;;;;;;;;;:23;;;;;;;;;;;7252:3;7235:13;;:20;;;;;;;;;;;7288:3;7280:6;7273:19;;;;;;;;;;;;7333:3;7313:8;:16;7322:6;7313:16;;;;;;;;;;;;;;;;:23;;7305:32;;;;;;;;7372:3;7355:13;;:20;;7348:28;;;;;;7137:247;;:::o;5203:142::-;5277:17;5312:7;:15;5320:6;5312:15;;;;;;;;;;;;;;;:25;5328:8;5312:25;;;;;;;;;;;;;;;;5305:32;;5203:142;;;;:::o"}}},"deployment":{"address":"0xaf9fcc1717425943060f879260575ab1b81241c3","txhash":"0xc589a3960acbb9b9f0c2279651a1f74c53070eecafcd50ec714299efa6d11106","block":1288649,"constructorArgs":null,"chainid":5}},"metadata":{"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:15:16.000Z","pclassid":"00055c4b-c765-43f9-a4c3-3bcf24e9de9e"}]},{"_id":"001a518d-874b-4a9f-96d0-2084f4348053","id":"1_495818","dtypeid":null,"data":{"name":"TokenAuthority","license":"None","gapi":[{"constant":true,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"sig","type":"bytes4"}],"name":"canCall","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_token","type":"address"},{"name":"_colony","type":"address"},{"name":"allowedToTransfer","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"sourceByLanguage":{"0":{"sourcesTemp":{"TokenAuthority":"/**\n *Submitted for verification at Etherscan.io on 2020-02-03\n*/\n\npragma solidity ^0.5.8;\n/*\n  This file is part of The Colony Network.\n\n  The Colony Network is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  The Colony Network is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n\ncontract TokenAuthority is DSAuthority {\n  address public token;\n  mapping(address => mapping(bytes4 => bool)) authorizations;\n\n  bytes4 constant BURN_FUNC_SIG = bytes4(keccak256(\"burn(uint256)\"));\n  bytes4 constant BURN_OVERLOAD_FUNC_SIG = bytes4(keccak256(\"burn(address,uint256)\"));\n\n  constructor(address _token, address _colony, address[] memory allowedToTransfer) public {\n    token = _token;\n    bytes4 transferSig = bytes4(keccak256(\"transfer(address,uint256)\"));\n    bytes4 transferFromSig = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n    bytes4 mintSig = bytes4(keccak256(\"mint(uint256)\"));\n    bytes4 mintSigOverload = bytes4(keccak256(\"mint(address,uint256)\"));\n\n    authorizations[_colony][transferSig] = true;\n    authorizations[_colony][mintSig] = true;\n    authorizations[_colony][mintSigOverload] = true;\n\n    for (uint i = 0; i < allowedToTransfer.length; i++) {\n      authorizations[allowedToTransfer[i]][transferSig] = true;\n      authorizations[allowedToTransfer[i]][transferFromSig] = true;\n    }\n  }\n\n  function canCall(address src, address dst, bytes4 sig) public view returns (bool) {\n    if (sig == BURN_FUNC_SIG || sig == BURN_OVERLOAD_FUNC_SIG) {\n      // We allow anyone to burn their own tokens even when the token is still locked\n      return true;\n    }\n\n    if (dst != token) {\n      return false;\n    }\n\n    return authorizations[src][sig];\n  }\n}"},"compiler":{"name":"solc","version":"v0.5.8+commit.23d335f2","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"608060405234801561001057600080fd5b506040516104e63803806104e68339810180604052606081101561003357600080fd5b815160208301516040840180519294919382019264010000000081111561005957600080fd5b8201602081018481111561006c57600080fd5b815185602082028301116401000000008211171561008957600080fd5b5050600080546001600160a01b0388166001600160a01b0319909116178155604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812092955091935091508060256104c18239604080519182900360250182207f6d696e742875696e7432353629000000000000000000000000000000000000008352815192839003600d0183207f6d696e7428616464726573732c75696e7432353629000000000000000000000084528251938490036015019093206001600160a01b0389166000908152600160208181528583207fffffffff00000000000000000000000000000000000000000000000000000000808c168552818352878520805460ff199081168617909155818a1686528284528886208054821686179055908616855291529482208054909516179093559094509192505b85518110156102cb5760018060008884815181106101ed57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160e01b0319166001600160e01b031916815260200190815260200160002060006101000a81548160ff021916908315150217905550600180600088848151811061026257fe5b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081207fffffffff00000000000000000000000000000000000000000000000000000000891682529092529020805460ff19169115159190911790556001016101d3565b50505050505050506101df806102e26000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b70096131461003b578063fc0c546a14610090575b600080fd5b61007c6004803603606081101561005157600080fd5b5080356001600160a01b0390811691602081013590911690604001356001600160e01b0319166100b4565b604080519115158252519081900360200190f35b6100986101a4565b604080516001600160a01b039092168252519081900360200190f35b604080517f6275726e2875696e7432353629000000000000000000000000000000000000008152905190819003600d0190206000906001600160e01b0319838116911614806101405750604080517f6275726e28616464726573732c75696e74323536290000000000000000000000815290519081900360150190206001600160e01b03198381169116145b1561014d5750600161019d565b6000546001600160a01b0384811691161461016a5750600061019d565b506001600160a01b03831660009081526001602090815260408083206001600160e01b03198516845290915290205460ff165b9392505050565b6000546001600160a01b03168156fea165627a7a72305820905ae19ec95e696850884f6171ef6edd4a5cbabf1cd08b31581bca5024779c4100297472616e7366657246726f6d28616464726573732c616464726573732c75696e74323536290000000000000000000000009d35e819b96312c412403456f0ed94c4e65fce510000000000000000000000002c9f30a6585e6b9783fb410bf702753d73c8deae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"2726:1432:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2726:1432:0;;;;;;;;;;;;;;;;;;;;;;;;3792:363;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3792:363:0;;-1:-1:-1;;;;;3792:363:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3792:363:0;;:::i;:::-;;;;;;;;;;;;;;;;;;2770:20;;;:::i;:::-;;;;-1:-1:-1;;;;;2770:20:0;;;;;;;;;;;;;;3792:363;2899:26;;;;;;;;;;;;;;;;3868:4;;-1:-1:-1;;;;;;3885:20:0;;;;;;;:53;;-1:-1:-1;2979:34:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3909:29:0;;;;;;3885:53;3881:174;;;-1:-1:-1;4043:4:0;4036:11;;3881:174;4074:5;;-1:-1:-1;;;;;4067:12:0;;;4074:5;;4067:12;4063:47;;-1:-1:-1;4097:5:0;4090:12;;4063:47;-1:-1:-1;;;;;;4125:19:0;;;;;;:14;:19;;;;;;;;-1:-1:-1;;;;;;4125:24:0;;;;;;;;;;;;3792:363;;;;;;:::o;2770:20::-;;;-1:-1:-1;;;;;2770:20:0;;:::o"}}}}}},"metadata":{"chainids":[1],"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:17:49.000Z","ppackageid":null,"pfunctions":[{"_id":"65d58461-ee6d-4cf6-afb3-ad5b3bae68c8","dtypeid":null,"graphid":null,"data":{"signature":"0x792e9825","signatureString":"(address,address,address[])","gapi":{"inputs":[{"name":"_token","type":"address"},{"name":"_colony","type":"address"},{"name":"allowedToTransfer","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"001a518d-874b-4a9f-96d0-2084f4348053"},{"_id":"a522ce11-2bd1-4164-bca6-176522a59c9d","dtypeid":null,"graphid":null,"data":{"name":"canCall","signature":"0xb7009613","signatureString":"canCall(address,address,bytes4)","gapi":{"constant":true,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"sig","type":"bytes4"}],"name":"canCall","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"001a518d-874b-4a9f-96d0-2084f4348053"},{"_id":"b87efec9-7ae8-4810-808c-8fcb4b1b98be","dtypeid":null,"graphid":null,"data":{"name":"token","signature":"0xfc0c546a","signatureString":"token()","gapi":{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"001a518d-874b-4a9f-96d0-2084f4348053"}],"pclassInstances":[{"_id":"d83b3df7-cd61-401f-865a-7f40ac0942d5","id":55,"pclassid_":"1_495818","ppackageid":null,"dtypeid":null,"data":{"compiler":{"name":"solc","version":"v0.5.8+commit.23d335f2","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"608060405234801561001057600080fd5b506040516104e63803806104e68339810180604052606081101561003357600080fd5b815160208301516040840180519294919382019264010000000081111561005957600080fd5b8201602081018481111561006c57600080fd5b815185602082028301116401000000008211171561008957600080fd5b5050600080546001600160a01b0388166001600160a01b0319909116178155604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812092955091935091508060256104c18239604080519182900360250182207f6d696e742875696e7432353629000000000000000000000000000000000000008352815192839003600d0183207f6d696e7428616464726573732c75696e7432353629000000000000000000000084528251938490036015019093206001600160a01b0389166000908152600160208181528583207fffffffff00000000000000000000000000000000000000000000000000000000808c168552818352878520805460ff199081168617909155818a1686528284528886208054821686179055908616855291529482208054909516179093559094509192505b85518110156102cb5760018060008884815181106101ed57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160e01b0319166001600160e01b031916815260200190815260200160002060006101000a81548160ff021916908315150217905550600180600088848151811061026257fe5b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081207fffffffff00000000000000000000000000000000000000000000000000000000891682529092529020805460ff19169115159190911790556001016101d3565b50505050505050506101df806102e26000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b70096131461003b578063fc0c546a14610090575b600080fd5b61007c6004803603606081101561005157600080fd5b5080356001600160a01b0390811691602081013590911690604001356001600160e01b0319166100b4565b604080519115158252519081900360200190f35b6100986101a4565b604080516001600160a01b039092168252519081900360200190f35b604080517f6275726e2875696e7432353629000000000000000000000000000000000000008152905190819003600d0190206000906001600160e01b0319838116911614806101405750604080517f6275726e28616464726573732c75696e74323536290000000000000000000000815290519081900360150190206001600160e01b03198381169116145b1561014d5750600161019d565b6000546001600160a01b0384811691161461016a5750600061019d565b506001600160a01b03831660009081526001602090815260408083206001600160e01b03198516845290915290205460ff165b9392505050565b6000546001600160a01b03168156fea165627a7a72305820905ae19ec95e696850884f6171ef6edd4a5cbabf1cd08b31581bca5024779c4100297472616e7366657246726f6d28616464726573732c616464726573732c75696e74323536290000000000000000000000009d35e819b96312c412403456f0ed94c4e65fce510000000000000000000000002c9f30a6585e6b9783fb410bf702753d73c8deae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"2726:1432:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2726:1432:0;;;;;;;;;;;;;;;;;;;;;;;;3792:363;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3792:363:0;;-1:-1:-1;;;;;3792:363:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3792:363:0;;:::i;:::-;;;;;;;;;;;;;;;;;;2770:20;;;:::i;:::-;;;;-1:-1:-1;;;;;2770:20:0;;;;;;;;;;;;;;3792:363;2899:26;;;;;;;;;;;;;;;;3868:4;;-1:-1:-1;;;;;;3885:20:0;;;;;;;:53;;-1:-1:-1;2979:34:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3909:29:0;;;;;;3885:53;3881:174;;;-1:-1:-1;4043:4:0;4036:11;;3881:174;4074:5;;-1:-1:-1;;;;;4067:12:0;;;4074:5;;4067:12;4063:47;;-1:-1:-1;4097:5:0;4090:12;;4063:47;-1:-1:-1;;;;;;4125:19:0;;;;;;:14;:19;;;;;;;;-1:-1:-1;;;;;;4125:24:0;;;;;;;;;;;;3792:363;;;;;;:::o;2770:20::-;;;-1:-1:-1;;;;;2770:20:0;;:::o"}}},"deployment":{"address":"0x190f7767931c4b15e4c2bda2792ab0b385a55738","txhash":"0x550949e415870b1e257d08c325a0cef82fb38c49b69ddec17033f0af4aa3cf3a","block":9434272,"constructorArgs":null,"chainid":1}},"metadata":{"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:18:20.000Z","pclassid":"001a518d-874b-4a9f-96d0-2084f4348053"}]},{"_id":"0020ae16-0690-4443-86b1-a69c8c34d85d","id":"1_519320","dtypeid":null,"data":{"name":"ERC20Token","license":"None","gapi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint256","name":"cap","type":"uint256"},{"internalType":"uint256","name":"initialSupply","type":"uint256"},{"internalType":"bool","name":"transferEnabled","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"OperatorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"OperatorRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"TransferEnabled","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"builtOn","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"enableTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isMinter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isOperator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"transferEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"sourceByLanguage":{"0":{"sourcesTemp":{"ERC20Token":"/**\n *Submitted for verification at Etherscan.io on 2019-12-24\n*/\n\npragma solidity ^0.5.15;\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: @openzeppelin/contracts/introspection/ERC165Checker.sol\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function _supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return _supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!_supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with the `supportsERC165` method in this library.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool success, bool result)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let encodedParams_data := add(0x20, encodedParams)\n            let encodedParams_size := mload(encodedParams)\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n\n            success := staticcall(\n                30000,                   // 30k gas\n                account,                 // To addr\n                encodedParams_data,\n                encodedParams_size,\n                output,\n                0x20                     // Outputs are 32 bytes long\n            )\n\n            result := mload(output)      // Load the result\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\n// File: @openzeppelin/contracts/introspection/IERC165.sol\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/introspection/ERC165.sol\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363 is IERC20, ERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value) public returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool);\n\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 value) public returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(address spender, uint256 value, bytes memory data) public returns (bool);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363Receiver {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n     * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) public returns (bytes4); // solhint-disable-line  max-line-length\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363Spender {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n     * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) public returns (bytes4);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n\n/**\n * @title ERC1363\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\ncontract ERC1363 is ERC20, IERC1363 {\n    using Address for address;\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n    bytes4 internal constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n    bytes4 internal constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\n\n    // Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\n    bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\n\n    // Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\n    bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\n\n    constructor() public {\n        // register the supported interfaces to conform to ERC1363 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1363_TRANSFER);\n        _registerInterface(_INTERFACE_ID_ERC1363_APPROVE);\n    }\n\n    function transferAndCall(address to, uint256 value) public returns (bool) {\n        return transferAndCall(to, value, \"\");\n    }\n\n    function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool) {\n        require(transfer(to, value));\n        require(_checkAndCallTransfer(msg.sender, to, value, data));\n        return true;\n    }\n\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool) {\n        return transferFromAndCall(from, to, value, \"\");\n    }\n\n    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public returns (bool) {\n        require(transferFrom(from, to, value));\n        require(_checkAndCallTransfer(from, to, value, data));\n        return true;\n    }\n\n    function approveAndCall(address spender, uint256 value) public returns (bool) {\n        return approveAndCall(spender, value, \"\");\n    }\n\n    function approveAndCall(address spender, uint256 value, bytes memory data) public returns (bool) {\n        approve(spender, value);\n        require(_checkAndCallApprove(spender, value, data));\n        return true;\n    }\n\n    /**\n     * @dev Internal function to invoke `onTransferReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param from address Representing the previous owner of the given token value\n     * @param to address Target address that will receive the tokens\n     * @param value uint256 The amount mount of tokens to be transferred\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallTransfer(address from, address to, uint256 value, bytes memory data) internal returns (bool) {\n        if (!to.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Receiver(to).onTransferReceived(\n            msg.sender, from, value, data\n        );\n        return (retval == _ERC1363_RECEIVED);\n    }\n\n    /**\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallApprove(address spender, uint256 value, bytes memory data) internal returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\n            msg.sender, value, data\n        );\n        return (retval == _ERC1363_APPROVED);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// File: @openzeppelin/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole is Context {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(_msgSender());\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(_msgSender());\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Capped.sol\n\n/**\n * @dev Extension of {ERC20Mintable} that adds a cap to the supply of tokens.\n */\ncontract ERC20Capped is ERC20Mintable {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20Mintable-mint}.\n     *\n     * Requirements:\n     *\n     * - `value` must not cause the total supply to go over the cap.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\n        super._mint(account, value);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\ncontract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev See {ERC20-_burnFrom}.\n     */\n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n}\n\n// File: @openzeppelin/contracts/ownership/Ownable.sol\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n    /**\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n}\n\n// File: ico-maker/contracts/access/roles/OperatorRole.sol\n\ncontract OperatorRole {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    Roles.Role private _operators;\n\n    constructor() internal {\n        _addOperator(msg.sender);\n    }\n\n    modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n\n    function isOperator(address account) public view returns (bool) {\n        return _operators.has(account);\n    }\n\n    function addOperator(address account) public onlyOperator {\n        _addOperator(account);\n    }\n\n    function renounceOperator() public {\n        _removeOperator(msg.sender);\n    }\n\n    function _addOperator(address account) internal {\n        _operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function _removeOperator(address account) internal {\n        _operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n}\n\n// File: ico-maker/contracts/token/ERC20/BaseERC20Token.sol\n\n/**\n * @title BaseERC20Token\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of the BaseERC20Token\n */\ncontract BaseERC20Token is ERC20Detailed, ERC20Capped, ERC20Burnable, OperatorRole, TokenRecover {\n\n    event MintFinished();\n    event TransferEnabled();\n\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    // indicates if transfer is enabled\n    bool private _transferEnabled = false;\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Tokens can be moved only after if transfer enabled or if you are an approved operator.\n     */\n    modifier canTransfer(address from) {\n        require(_transferEnabled || isOperator(from));\n        _;\n    }\n\n    /**\n     * @param name Name of the token\n     * @param symbol A symbol to be used as ticker\n     * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\n     * @param cap Maximum number of tokens mintable\n     * @param initialSupply Initial token supply\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialSupply\n    )\n        public\n        ERC20Detailed(name, symbol, decimals)\n        ERC20Capped(cap)\n    {\n        if (initialSupply > 0) {\n            _mint(owner(), initialSupply);\n        }\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @return if transfer is enabled or not.\n     */\n    function transferEnabled() public view returns (bool) {\n        return _transferEnabled;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public canMint returns (bool) {\n        return super.mint(to, value);\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transfer(address to, uint256 value) public canTransfer(msg.sender) returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFrom(address from, address to, uint256 value) public canTransfer(from) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() public onlyOwner canMint {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n\n    /**\n   * @dev Function to enable transfers.\n   */\n    function enableTransfer() public onlyOwner {\n        _transferEnabled = true;\n\n        emit TransferEnabled();\n    }\n\n    /**\n     * @dev remove the `operator` role from address\n     * @param account Address you want to remove role\n     */\n    function removeOperator(address account) public onlyOwner {\n        _removeOperator(account);\n    }\n\n    /**\n     * @dev remove the `minter` role from address\n     * @param account Address you want to remove role\n     */\n    function removeMinter(address account) public onlyOwner {\n        _removeMinter(account);\n    }\n}\n\n// File: ico-maker/contracts/token/ERC1363/BaseERC1363Token.sol\n\n/**\n * @title BaseERC1363Token\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of the BaseERC20Token with ERC1363 behaviours\n */\ncontract BaseERC1363Token is BaseERC20Token, ERC1363 {\n\n    /**\n     * @param name Name of the token\n     * @param symbol A symbol to be used as ticker\n     * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\n     * @param cap Maximum number of tokens mintable\n     * @param initialSupply Initial token supply\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialSupply\n    )\n        public\n        BaseERC20Token(name, symbol, decimals, cap, initialSupply)\n    {} // solhint-disable-line no-empty-blocks\n}\n\n// File: contracts/ERC20Token.sol\n\n/**\n * @title ERC20Token\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of a BaseERC1363Token\n */\ncontract ERC20Token is BaseERC1363Token {\n\n    string public builtOn = \"https://vittominacori.github.io/erc20-generator\";\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialSupply,\n        bool transferEnabled\n    )\n        public\n        BaseERC1363Token(name, symbol, decimals, cap, initialSupply)\n    {\n        if (transferEnabled) {\n            enableTransfer();\n        }\n    }\n}"},"compiler":{"name":"solc","version":"v0.5.15+commit.6a57276f","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"6009805461ffff60a01b1916905560e0604052602f60808181529062002b5660a03980516200003791600b91602090910190620008f9565b503480156200004557600080fd5b5060405162002b8538038062002b85833981810160405260c08110156200006b57600080fd5b81019080805160405193929190846401000000008211156200008c57600080fd5b908301906020820185811115620000a257600080fd5b8251640100000000811182820188101715620000bd57600080fd5b82525081516020918201929091019080838360005b83811015620000ec578181015183820152602001620000d2565b50505050905090810190601f1680156200011a5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013e57600080fd5b9083019060208201858111156200015457600080fd5b82516401000000008111828201881017156200016f57600080fd5b82525081516020918201929091019080838360005b838110156200019e57818101518382015260200162000184565b50505050905090810190601f168015620001cc5780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608090940151885193965090945091879187918791879187918691869186918691869183918791879187916200021e9160009190860190620008f9565b50815162000234906001906020850190620008f9565b506002805460ff191660ff92909216919091179055506200026990506200025a620003e7565b6001600160e01b03620003ec16565b60008111620002bf576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b600755620002d6336001600160e01b036200043e16565b620002e96001600160e01b03620003e716565b600980546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015620003635762000363620003536001600160e01b036200049016565b826001600160e01b036200049f16565b506200038693506301ffc9a760e01b9250506001600160e01b036200053d169050565b620003a1634bbee2df60e01b6001600160e01b036200053d16565b620003bc637dcf646760e11b6001600160e01b036200053d16565b50505050508015620003db57620003db6001600160e01b03620005c216565b5050505050506200099b565b335b90565b620004078160066200066560201b62001dc01790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b620004598160086200066560201b62001dc01790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6009546001600160a01b031690565b600754620004ce82620004ba6001600160e01b03620006f216565b620006f860201b620014731790919060201c565b111562000522576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b6200053982826200075a60201b62001e411760201c565b5050565b6001600160e01b031980821614156200059d576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600a60205260409020805460ff19166001179055565b620005d56001600160e01b036200085f16565b62000627576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6009805460ff60a81b1916600160a81b1790556040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b6200067a82826001600160e01b036200089016565b15620006cd576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60055490565b60008282018381101562000753576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216620007b6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620007d281600554620006f860201b620014731790919060201c565b6005556001600160a01b0382166000908152600360209081526040909120546200080791839062001473620006f8821b17901c565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6009546000906001600160a01b0316620008816001600160e01b03620003e716565b6001600160a01b031614905090565b60006001600160a01b038216620008d95760405162461bcd60e51b815260040180806020018281038252602281526020018062002b346022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200093c57805160ff19168380011785556200096c565b828001600101855582156200096c579182015b828111156200096c5782518255916020019190600101906200094f565b506200097a9291506200097e565b5090565b620003e991905b808211156200097a576000815560010162000985565b61218980620009ab6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806379cc67901161013b578063a9059cbb116100b8578063cae9ca511161007c578063cae9ca511461081d578063d8fbe994146108d8578063dd62ed3e1461090e578063f1b50c1d1461093c578063f2fde38b1461094457610248565b8063a9059cbb146106d7578063aa271e1a14610703578063ac8a584a14610729578063b60b70841461074f578063c1d34b891461075757610248565b806395d89b41116100ff57806395d89b411461064f578063983b2d5614610657578063986502751461067d5780639870d7fe14610685578063a457c2d7146106ab57610248565b806379cc6790146105c35780637d64bcb4146105ef5780638980f11f146105f75780638da5cb5b146106235780638f32d59b1461064757610248565b80633177029f116101c957806342966c681161018d57806342966c681461054a5780634cd412d5146105675780636d70f7ae1461056f57806370a0823114610595578063715018a6146105bb57610248565b80633177029f14610403578063355274ea1461042f57806339509351146104375780634000aea01461046357806340c10f191461051e57610248565b806318160ddd1161021057806318160ddd1461036557806323b872dd1461037f5780632ab6f8db146103b55780633092afd5146103bf578063313ce567146103e557610248565b806301ffc9a71461024d57806305d2035b1461028857806306fdde0314610290578063095ea7b31461030d5780631296ee6214610339575b600080fd5b6102746004803603602081101561026357600080fd5b50356001600160e01b03191661096a565b604080519115158252519081900360200190f35b610274610989565b610298610999565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d25781810151838201526020016102ba565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102746004803603604081101561032357600080fd5b506001600160a01b038135169060200135610a2f565b6102746004803603604081101561034f57600080fd5b506001600160a01b038135169060200135610a4c565b61036d610a6f565b60408051918252519081900360200190f35b6102746004803603606081101561039557600080fd5b506001600160a01b03813581169160208101359091169060400135610a75565b6103bd610ab3565b005b6103bd600480360360208110156103d557600080fd5b50356001600160a01b0316610abe565b6103ed610b11565b6040805160ff9092168252519081900360200190f35b6102746004803603604081101561041957600080fd5b506001600160a01b038135169060200135610b1a565b61036d610b36565b6102746004803603604081101561044d57600080fd5b506001600160a01b038135169060200135610b3c565b6102746004803603606081101561047957600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156104a957600080fd5b8201836020820111156104bb57600080fd5b803590602001918460018302840111640100000000831117156104dd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b95945050505050565b6102746004803603604081101561053457600080fd5b506001600160a01b038135169060200135610bc9565b6103bd6004803603602081101561056057600080fd5b5035610bed565b610274610bfe565b6102746004803603602081101561058557600080fd5b50356001600160a01b0316610c0e565b61036d600480360360208110156105ab57600080fd5b50356001600160a01b0316610c27565b6103bd610c42565b6103bd600480360360408110156105d957600080fd5b506001600160a01b038135169060200135610cd3565b6103bd610ce1565b6103bd6004803603604081101561060d57600080fd5b506001600160a01b038135169060200135610d7d565b61062b610e5b565b604080516001600160a01b039092168252519081900360200190f35b610274610e6a565b610298610e90565b6103bd6004803603602081101561066d57600080fd5b50356001600160a01b0316610ef0565b6103bd610f44565b6103bd6004803603602081101561069b57600080fd5b50356001600160a01b0316610f54565b610274600480360360408110156106c157600080fd5b506001600160a01b038135169060200135610f6f565b610274600480360360408110156106ed57600080fd5b506001600160a01b038135169060200135610fdd565b6102746004803603602081101561071957600080fd5b50356001600160a01b0316611019565b6103bd6004803603602081101561073f57600080fd5b50356001600160a01b031661102c565b61029861107c565b6102746004803603608081101561076d57600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156107a857600080fd5b8201836020820111156107ba57600080fd5b803590602001918460018302840111640100000000831117156107dc57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061110a945050505050565b6102746004803603606081101561083357600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561086357600080fd5b82018360208201111561087557600080fd5b8035906020019184600183028401116401000000008311171561089757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611140945050505050565b610274600480360360608110156108ee57600080fd5b506001600160a01b03813581169160208101359091169060400135611158565b61036d6004803603604081101561092457600080fd5b506001600160a01b0381358116916020013516611175565b6103bd6111a0565b6103bd6004803603602081101561095a57600080fd5b50356001600160a01b0316611225565b6001600160e01b0319166000908152600a602052604090205460ff1690565b600954600160a01b900460ff1690565b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b5050505050905090565b6000610a43610a3c611275565b8484611279565b50600192915050565b6000610a68838360405180602001604052806000815250610b95565b9392505050565b60055490565b6009546000908490600160a81b900460ff1680610a965750610a9681610c0e565b610a9f57600080fd5b610aaa858585611365565b95945050505050565b610abc336113e3565b565b610ac6610e6a565b610b05576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e8161142b565b50565b60025460ff1690565b6000610a68838360405180602001604052806000815250611140565b60075490565b6000610a43610b49611275565b84610b908560046000610b5a611275565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61147316565b611279565b6000610ba18484610fdd565b610baa57600080fd5b610bb6338585856114cd565b610bbf57600080fd5b5060019392505050565b600954600090600160a01b900460ff1615610be357600080fd5b610a688383611600565b610b0e610bf8611275565b82611652565b600954600160a81b900460ff1690565b6000610c2160088363ffffffff61174e16565b92915050565b6001600160a01b031660009081526003602052604090205490565b610c4a610e6a565b610c89576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b6009546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600980546001600160a01b0319169055565b610cdd82826117b5565b5050565b610ce9610e6a565b610d28576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b600954600160a01b900460ff1615610d3f57600080fd5b6009805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b610d85610e6a565b610dc4576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b816001600160a01b031663a9059cbb610ddb610e5b565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505050506040513d6020811015610e5557600080fd5b50505050565b6009546001600160a01b031690565b6009546000906001600160a01b0316610e81611275565b6001600160a01b031614905090565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a255780601f106109fa57610100808354040283529160200191610a25565b610f00610efb611275565b611019565b610f3b5760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe76030913960400191505060405180910390fd5b610b0e81611809565b610abc610f4f611275565b61142b565b610f5d33610c0e565b610f6657600080fd5b610b0e81611851565b6000610a43610f7c611275565b84610b90856040518060600160405280602581526020016121306025913960046000610fa6611275565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61189916565b6009546000903390600160a81b900460ff1680610ffe5750610ffe81610c0e565b61100757600080fd5b6110118484611930565b949350505050565b6000610c2160068363ffffffff61174e16565b611034610e6a565b611073576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e816113e3565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156111025780601f106110d757610100808354040283529160200191611102565b820191906000526020600020905b8154815290600101906020018083116110e557829003601f168201915b505050505081565b6000611117858585610a75565b61112057600080fd5b61112c858585856114cd565b61113557600080fd5b506001949350505050565b600061114c8484610a2f565b50610bb6848484611944565b60006110118484846040518060200160405280600081525061110a565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6111a8610e6a565b6111e7576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b6009805460ff60a81b1916600160a81b1790556040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b61122d610e6a565b61126c576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e81611a69565b3390565b6001600160a01b0383166112be5760405162461bcd60e51b815260040180806020018281038252602481526020018061210c6024913960400191505060405180910390fd5b6001600160a01b0382166113035760405162461bcd60e51b8152600401808060200182810382526022815260200180611f9f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000611372848484611b0a565b610bbf8461137e611275565b610b9085604051806060016040528060288152602001612038602891396001600160a01b038a166000908152600460205260408120906113bc611275565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61189916565b6113f460088263ffffffff611c6816565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b61143c60068263ffffffff611c6816565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600082820183811015610a68576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006114e1846001600160a01b0316611ccf565b6114ed57506000611011565b604051632229f29760e21b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a16946388a7ca5c9490938c938b938b939260a4019060208501908083838e5b8381101561156757818101518382015260200161154f565b50505050905090810190601f1680156115945780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d60208110156115e057600080fd5b50516001600160e01b031916632229f29760e21b14915050949350505050565b600061160d610efb611275565b6116485760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe76030913960400191505060405180910390fd5b610a438383611d06565b6001600160a01b0382166116975760405162461bcd60e51b81526004018080602001828103825260218152602001806120c66021913960400191505060405180910390fd5b6116da81604051806060016040528060228152602001611f57602291396001600160a01b038516600090815260036020526040902054919063ffffffff61189916565b6001600160a01b038316600090815260036020526040902055600554611706908263ffffffff611d7e16565b6005556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006001600160a01b0382166117955760405162461bcd60e51b81526004018080602001828103825260228152602001806120806022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6117bf8282611652565b610cdd826117cb611275565b610b90846040518060600160405280602481526020016120a2602491396001600160a01b0388166000908152600460205260408120906113bc611275565b61181a60068263ffffffff611dc016565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61186260088263ffffffff611dc016565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b600081848411156119285760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118ed5781810151838201526020016118d5565b50505050905090810190601f16801561191a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000610a4361193d611275565b8484611b0a565b6000611958846001600160a01b0316611ccf565b61196457506000610a68565b6040516307b04a2d60e41b81523360048201818152602483018690526060604484019081528551606485015285516000946001600160a01b038a1694637b04a2d09490938a938a936084019060208501908083838d5b838110156119d25781810151838201526020016119ba565b50505050905090810190601f1680156119ff5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b505050506040513d6020811015611a4a57600080fd5b50516001600160e01b0319166307b04a2d60e41b149150509392505050565b6001600160a01b038116611aae5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f796026913960400191505060405180910390fd5b6009546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316611b4f5760405162461bcd60e51b81526004018080602001828103825260258152602001806120e76025913960400191505060405180910390fd5b6001600160a01b038216611b945760405162461bcd60e51b8152600401808060200182810382526023815260200180611f346023913960400191505060405180910390fd5b611bd781604051806060016040528060268152602001611fc1602691396001600160a01b038616600090815260036020526040902054919063ffffffff61189916565b6001600160a01b038085166000908152600360205260408082209390935590841681522054611c0c908263ffffffff61147316565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c72828261174e565b611cad5760405162461bcd60e51b81526004018080602001828103825260218152602001806120176021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906110115750141592915050565b600754611d2182611d15610a6f565b9063ffffffff61147316565b1115611d74576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b610cdd8282611e41565b6000610a6883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611899565b611dca828261174e565b15611e1c576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038216611e9c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b600554611eaf908263ffffffff61147316565b6005556001600160a01b038216600090815260036020526040902054611edb908263ffffffff61147316565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526f6c65733a206163636f756e7420697320746865207a65726f206164647265737345524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582084001a10073f76e909619ca9197058de11ef66f5023cb4494056dfe6ba14f46864736f6c634300050f0032526f6c65733a206163636f756e7420697320746865207a65726f206164647265737368747470733a2f2f766974746f6d696e61636f72692e6769746875622e696f2f65726332302d67656e657261746f7200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000034e6577000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e45570000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"56439:496:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;56439:496:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27896:135;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27896:135:0;-1:-1:-1;;;;;;27896:135:0;;:::i;:::-;;;;;;;;;;;;;;;;;;52915:96;;;:::i;41682:83::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;41682:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20385:152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;20385:152:0;;;;;;;;:::i;38085:130::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38085:130:0;;;;;;;;:::i;19406:91::-;;;:::i;:::-;;;;;;;;;;;;;;;;54312:164;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;54312:164:0;;;;;;;;;;;;;;;;;:::i;50844:81::-;;;:::i;:::-;;55228:97;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;55228:97:0;-1:-1:-1;;;;;55228:97:0;;:::i;42534:83::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;38891:138;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38891:138:0;;;;;;;;:::i;45938:75::-;;;:::i;21722:210::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;21722:210:0;;;;;;;;:::i;38223:232::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;38223:232:0;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;38223:232:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;38223:232:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;38223:232:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;38223:232:0;;-1:-1:-1;38223:232:0;;-1:-1:-1;;;;;38223:232:0:i;53435:118::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;53435:118:0;;;;;;;;:::i;46812:83::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;46812:83:0;;:::i;53084:96::-;;;:::i;50617:113::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;50617:113:0;-1:-1:-1;;;;;50617:113:0;;:::i;19560:110::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19560:110:0;-1:-1:-1;;;;;19560:110:0;;:::i;48764:140::-;;;:::i;46957:103::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;46957:103:0;;;;;;;;:::i;54552:124::-;;;:::i;50020:152::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;50020:152:0;;;;;;;;:::i;47953:79::-;;;:::i;:::-;;;;-1:-1:-1;;;;;47953:79:0;;;;;;;;;;;;;;48319:94;;;:::i;41884:87::-;;;:::i;44281:92::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;44281:92:0;-1:-1:-1;;;;;44281:92:0;;:::i;44381:79::-;;;:::i;50738:98::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;50738:98:0;-1:-1:-1;;;;;50738:98:0;;:::i;22435:261::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;22435:261:0;;;;;;;;:::i;53801:142::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;53801:142:0;;;;;;;;:::i;44164:109::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;44164:109:0;-1:-1:-1;;;;;44164:109:0;;:::i;54995:101::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;54995:101:0;-1:-1:-1;;;;;54995:101:0;;:::i;56488:73::-;;;:::i;38629:254::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;38629:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;38629:254:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;38629:254:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;38629:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;38629:254:0;;-1:-1:-1;38629:254:0;;-1:-1:-1;;;;;38629:254:0:i;39037:223::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;39037:223:0;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;39037:223:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;39037:223:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;39037:223:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;39037:223:0;;-1:-1:-1;39037:223:0;;-1:-1:-1;;;;;39037:223:0:i;38463:158::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38463:158:0;;;;;;;;;;;;;;;;;:::i;20104:134::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;20104:134:0;;;;;;;;;;:::i;54741:120::-;;;:::i;49059:109::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;49059:109:0;-1:-1:-1;;;;;49059:109:0;;:::i;27896:135::-;-1:-1:-1;;;;;;27990:33:0;27966:4;27990:33;;;:20;:33;;;;;;;;;27896:135::o;52915:96::-;52987:16;;-1:-1:-1;;;52987:16:0;;;;;52915:96::o;41682:83::-;41752:5;41745:12;;;;;;;;-1:-1:-1;;41745:12:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41719:13;;41745:12;;41752:5;;41745:12;;41752:5;41745:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41682:83;:::o;20385:152::-;20451:4;20468:39;20477:12;:10;:12::i;:::-;20491:7;20500:6;20468:8;:39::i;:::-;-1:-1:-1;20525:4:0;20385:152;;;;:::o;38085:130::-;38153:4;38177:30;38193:2;38197:5;38177:30;;;;;;;;;;;;:15;:30::i;:::-;38170:37;38085:130;-1:-1:-1;;;38085:130:0:o;19406:91::-;19477:12;;19406:91;:::o;54312:164::-;52099:16;;54409:4;;54394;;-1:-1:-1;;;52099:16:0;;;;;:36;;;52119:16;52130:4;52119:10;:16::i;:::-;52091:45;;;;;;54433:35;54452:4;54458:2;54462:5;54433:18;:35::i;:::-;54426:42;54312:164;-1:-1:-1;;;;;54312:164:0:o;50844:81::-;50890:27;50906:10;50890:15;:27::i;:::-;50844:81::o;55228:97::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;55295:22;55309:7;55295:13;:22::i;:::-;55228:97;:::o;42534:83::-;42600:9;;;;42534:83;:::o;38891:138::-;38963:4;38987:34;39002:7;39011:5;38987:34;;;;;;;;;;;;:14;:34::i;45938:75::-;46001:4;;45938:75;:::o;21722:210::-;21802:4;21819:83;21828:12;:10;:12::i;:::-;21842:7;21851:50;21890:10;21851:11;:25;21863:12;:10;:12::i;:::-;-1:-1:-1;;;;;21851:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;21851:25:0;;;:34;;;;;;;;;;;:50;:38;:50;:::i;:::-;21819:8;:83::i;38223:232::-;38310:4;38335:19;38344:2;38348:5;38335:8;:19::i;:::-;38327:28;;;;;;38374:50;38396:10;38408:2;38412:5;38419:4;38374:21;:50::i;:::-;38366:59;;;;;;-1:-1:-1;38443:4:0;38223:232;;;;;:::o;53435:118::-;51882:16;;53500:4;;-1:-1:-1;;;51882:16:0;;;;51881:17;51873:26;;;;;;53524:21;53535:2;53539:5;53524:10;:21::i;46812:83::-;46860:27;46866:12;:10;:12::i;:::-;46880:6;46860:5;:27::i;53084:96::-;53156:16;;-1:-1:-1;;;53156:16:0;;;;;53084:96::o;50617:113::-;50675:4;50699:23;:10;50714:7;50699:23;:14;:23;:::i;:::-;50692:30;50617:113;-1:-1:-1;;50617:113:0:o;19560:110::-;-1:-1:-1;;;;;19644:18:0;19617:7;19644:18;;;:9;:18;;;;;;;19560:110::o;48764:140::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;48847:6;;48826:40;;48863:1;;-1:-1:-1;;;;;48847:6:0;;48826:40;;48863:1;;48826:40;48877:6;:19;;-1:-1:-1;;;;;;48877:19:0;;;48764:140::o;46957:103::-;47026:26;47036:7;47045:6;47026:9;:26::i;:::-;46957:103;;:::o;54552:124::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;51882:16;;-1:-1:-1;;;51882:16:0;;;;51881:17;51873:26;;;;;;54613:16;:23;;-1:-1:-1;;;;54613:23:0;-1:-1:-1;;;54613:23:0;;;54654:14;;;;54613:23;;54654:14;54552:124::o;50020:152::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;50120:12;-1:-1:-1;;;;;50113:29:0;;50143:7;:5;:7::i;:::-;50152:11;50113:51;;;;;;;;;;;;;-1:-1:-1;;;;;50113:51:0;-1:-1:-1;;;;;50113:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;50113:51:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;50113:51:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;50020:152:0:o;47953:79::-;48018:6;;-1:-1:-1;;;;;48018:6:0;47953:79;:::o;48319:94::-;48399:6;;48359:4;;-1:-1:-1;;;;;48399:6:0;48383:12;:10;:12::i;:::-;-1:-1:-1;;;;;48383:22:0;;48376:29;;48319:94;:::o;41884:87::-;41956:7;41949:14;;;;;;;;-1:-1:-1;;41949:14:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41923:13;;41949:14;;41956:7;;41949:14;;41956:7;41949:14;;;;;;;;;;;;;;;;;;;;;;;;44281:92;44061:22;44070:12;:10;:12::i;:::-;44061:8;:22::i;:::-;44053:83;;;;-1:-1:-1;;;44053:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44346:19;44357:7;44346:10;:19::i;44381:79::-;44425:27;44439:12;:10;:12::i;:::-;44425:13;:27::i;50738:98::-;50566:22;50577:10;50566;:22::i;:::-;50558:31;;;;;;50807:21;50820:7;50807:12;:21::i;22435:261::-;22520:4;22537:129;22546:12;:10;:12::i;:::-;22560:7;22569:96;22608:15;22569:96;;;;;;;;;;;;;;;;;:11;:25;22581:12;:10;:12::i;:::-;-1:-1:-1;;;;;22569:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;22569:25:0;;;:34;;;;;;;;;;;:96;;:38;:96;:::i;53801:142::-;52099:16;;53886:4;;53865:10;;-1:-1:-1;;;52099:16:0;;;;;:36;;;52119:16;52130:4;52119:10;:16::i;:::-;52091:45;;;;;;53910:25;53925:2;53929:5;53910:14;:25::i;:::-;53903:32;53801:142;-1:-1:-1;;;;53801:142:0:o;44164:109::-;44220:4;44244:21;:8;44257:7;44244:21;:12;:21;:::i;54995:101::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;55064:24;55080:7;55064:15;:24::i;56488:73::-;;;;;;;;;;;;;;;-1:-1:-1;;56488:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;38629:254::-;38734:4;38759:29;38772:4;38778:2;38782:5;38759:12;:29::i;:::-;38751:38;;;;;;38808:44;38830:4;38836:2;38840:5;38847:4;38808:21;:44::i;:::-;38800:53;;;;;;-1:-1:-1;38871:4:0;38629:254;;;;;;:::o;39037:223::-;39128:4;39145:23;39153:7;39162:5;39145:7;:23::i;:::-;;39187:42;39208:7;39217:5;39224:4;39187:20;:42::i;38463:158::-;38549:4;38573:40;38593:4;38599:2;38603:5;38573:40;;;;;;;;;;;;:19;:40::i;20104:134::-;-1:-1:-1;;;;;20203:18:0;;;20176:7;20203:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;20104:134::o;54741:120::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;54795:16;:23;;-1:-1:-1;;;;54795:23:0;-1:-1:-1;;;54795:23:0;;;54836:17;;;;54795:23;;54836:17;54741:120::o;49059:109::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;49132:28;49151:8;49132:18;:28::i;9194:98::-;9274:10;9194:98;:::o;25367:338::-;-1:-1:-1;;;;;25461:19:0;;25453:68;;;;-1:-1:-1;;;25453:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;25540:21:0;;25532:68;;;;-1:-1:-1;;;25532:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;25613:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;25665:32;;;;;;;;;;;;;;;;;25367:338;;;:::o;21009:304::-;21098:4;21115:36;21125:6;21133:9;21144:6;21115:9;:36::i;:::-;21162:121;21171:6;21179:12;:10;:12::i;:::-;21193:89;21231:6;21193:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;21193:19:0;;;;;;:11;:19;;;;;;21213:12;:10;:12::i;:::-;-1:-1:-1;;;;;21193:33:0;;;;;;;;;;;;-1:-1:-1;21193:33:0;;;:89;;:37;:89;:::i;51069:136::-;51131:26;:10;51149:7;51131:26;:17;:26;:::i;:::-;51173:24;;-1:-1:-1;;;;;51173:24:0;;;;;;;;51069:136;:::o;44598:130::-;44658:24;:8;44674:7;44658:24;:15;:24;:::i;:::-;44698:22;;-1:-1:-1;;;;;44698:22:0;;;;;;;;44598:130;:::o;13271:181::-;13329:7;13361:5;;;13385:6;;;;13377:46;;;;;-1:-1:-1;;;13377:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;39816:362;39925:4;39947:15;:2;-1:-1:-1;;;;;39947:13:0;;:15::i;:::-;39942:61;;-1:-1:-1;39986:5:0;39979:12;;39942:61;40029:94;;-1:-1:-1;;;40029:94:0;;40083:10;40029:94;;;;;;-1:-1:-1;;;;;40029:94:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;40013:13;;40029:39;;;;;;40083:10;;40095:4;;40101:5;;40108:4;;40029:94;;;;;;;;;;;40013:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;40029:94:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40029:94:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40029:94:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40029:94:0;-1:-1:-1;;;;;;40142:27:0;-1:-1:-1;;;40142:27:0;;-1:-1:-1;;39816:362:0;;;;;;:::o;45225:143::-;45299:4;44061:22;44070:12;:10;:12::i;44061:22::-;44053:83;;;;-1:-1:-1;;;44053:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45316:22;45322:7;45331:6;45316:5;:22::i;24579:348::-;-1:-1:-1;;;;;24655:21:0;;24647:67;;;;-1:-1:-1;;;24647:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24748:68;24771:6;24748:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;24748:18:0;;;;;;:9;:18;;;;;;;:68;;:22;:68;:::i;:::-;-1:-1:-1;;;;;24727:18:0;;;;;;:9;:18;;;;;:89;24842:12;;:24;;24859:6;24842:24;:16;:24;:::i;:::-;24827:12;:39;24882:37;;;;;;;;24908:1;;-1:-1:-1;;;;;24882:37:0;;;;;;;;;;;;24579:348;;:::o;43460:203::-;43532:4;-1:-1:-1;;;;;43557:21:0;;43549:68;;;;-1:-1:-1;;;43549:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;43635:20:0;:11;:20;;;;;;;;;;;;;;;43460:203::o;25891:232::-;25963:22;25969:7;25978:6;25963:5;:22::i;:::-;25996:119;26005:7;26014:12;:10;:12::i;:::-;26028:86;26067:6;26028:86;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;26028:20:0;;;;;;:11;:20;;;;;;26049:12;:10;:12::i;44468:122::-;44525:21;:8;44538:7;44525:21;:12;:21;:::i;:::-;44562:20;;-1:-1:-1;;;;;44562:20:0;;;;;;;;44468:122;:::o;50933:128::-;50992:23;:10;51007:7;50992:23;:14;:23;:::i;:::-;51031:22;;-1:-1:-1;;;;;51031:22:0;;;;;;;;50933:128;:::o;14200:192::-;14286:7;14322:12;14314:6;;;;14306:29;;;;-1:-1:-1;;;14306:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14306:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;14358:5:0;;;14200:192::o;19883:158::-;19952:4;19969:42;19979:12;:10;:12::i;:::-;19993:9;20004:6;19969:9;:42::i;40637:355::-;40736:4;40758:20;:7;-1:-1:-1;;;;;40758:18:0;;:20::i;:::-;40753:66;;-1:-1:-1;40802:5:0;40795:12;;40753:66;40845:92;;-1:-1:-1;;;40845:92:0;;40903:10;40845:92;;;;;;;;;;;;;;;;;;;;;;;;;;;40829:13;;-1:-1:-1;;;;;40845:43:0;;;;;40903:10;;40915:5;;40922:4;;40845:92;;;;;;;;;;40829:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;40845:92:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40845:92:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40845:92:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40845:92:0;-1:-1:-1;;;;;;40956:27:0;-1:-1:-1;;;40956:27:0;;-1:-1:-1;;40637:355:0;;;;;:::o;49274:229::-;-1:-1:-1;;;;;49348:22:0;;49340:73;;;;-1:-1:-1;;;49340:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49450:6;;49429:38;;-1:-1:-1;;;;;49429:38:0;;;;49450:6;;49429:38;;49450:6;;49429:38;49478:6;:17;;-1:-1:-1;;;;;;49478:17:0;-1:-1:-1;;;;;49478:17:0;;;;;;;;;;49274:229::o;23186:471::-;-1:-1:-1;;;;;23284:20:0;;23276:70;;;;-1:-1:-1;;;23276:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;23365:23:0;;23357:71;;;;-1:-1:-1;;;23357:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23461;23483:6;23461:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;23461:17:0;;;;;;:9;:17;;;;;;;:71;;:21;:71;:::i;:::-;-1:-1:-1;;;;;23441:17:0;;;;;;;:9;:17;;;;;;:91;;;;23566:20;;;;;;;:32;;23591:6;23566:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;23543:20:0;;;;;;;:9;:20;;;;;;;;;:55;;;;23614:35;;;;;;;23543:20;;23614:35;;;;;;;;;;;;;23186:471;;;:::o;43182:183::-;43262:18;43266:4;43272:7;43262:3;:18::i;:::-;43254:64;;;;-1:-1:-1;;;43254:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;43329:20:0;43352:5;43329:20;;;;;;;;;;;:28;;-1:-1:-1;;43329:28:0;;;43182:183::o;629:810::-;689:4;1348:20;;1191:66;1388:15;;;;;:42;;-1:-1:-1;1407:23:0;;;1380:51;-1:-1:-1;;629:810:0:o;46186:183::-;46289:4;;46261:24;46279:5;46261:13;:11;:13::i;:::-;:17;:24;:17;:24;:::i;:::-;:32;;46253:70;;;;;-1:-1:-1;;;46253:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;46334:27;46346:7;46355:5;46334:11;:27::i;13727:136::-;13785:7;13812:43;13816:1;13819;13812:43;;;;;;;;;;;;;;;;;:3;:43::i;42924:178::-;43002:18;43006:4;43012:7;43002:3;:18::i;:::-;43001:19;42993:63;;;;;-1:-1:-1;;;42993:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;43067:20:0;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;43067:27:0;43090:4;43067:27;;;42924:178::o;23938:308::-;-1:-1:-1;;;;;24014:21:0;;24006:65;;;;;-1:-1:-1;;;24006:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;24099:12;;:24;;24116:6;24099:24;:16;:24;:::i;:::-;24084:12;:39;-1:-1:-1;;;;;24155:18:0;;;;;;:9;:18;;;;;;:30;;24178:6;24155:30;:22;:30;:::i;:::-;-1:-1:-1;;;;;24134:18:0;;;;;;:9;:18;;;;;;;;:51;;;;24201:37;;;;;;;24134:18;;;;24201:37;;;;;;;;;;23938:308;;:::o"}}}}}},"metadata":{"chainids":[1],"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:17:49.000Z","ppackageid":null,"pfunctions":[{"_id":"040ad2c0-9d6b-4817-a9e3-2345ca4d6ea8","dtypeid":null,"graphid":null,"data":{"name":"decreaseAllowance","signature":"0xa457c2d7","signatureString":"decreaseAllowance(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"0441c60d-3e13-40fb-bd11-4dba5178ac19","dtypeid":null,"graphid":null,"data":{"name":"transferAndCall","signature":"0x1296ee62","signatureString":"transferAndCall(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"06f199ba-273e-4a80-a5e3-d4b37728daab","dtypeid":null,"graphid":null,"data":{"name":"increaseAllowance","signature":"0x39509351","signatureString":"increaseAllowance(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"092ba28c-8080-4f38-ba5c-ab7c79214f93","dtypeid":null,"graphid":null,"data":{"name":"OperatorRemoved","signature":"0x80c0b871","signatureString":"OperatorRemoved(address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"OperatorRemoved","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"12405d73-f932-4692-b614-201fd64aa9d2","dtypeid":null,"graphid":null,"data":{"name":"Transfer","signature":"0xddf252ad","signatureString":"Transfer(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"1af3805c-225f-4993-8e4a-3c77be8e84f0","dtypeid":null,"graphid":null,"data":{"name":"renounceOperator","signature":"0x2ab6f8db","signatureString":"renounceOperator()","gapi":{"constant":false,"inputs":[],"name":"renounceOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"1c690259-b2fc-4247-b62b-df62e78874f9","dtypeid":null,"graphid":null,"data":{"name":"supportsInterface","signature":"0x01ffc9a7","signatureString":"supportsInterface(bytes4)","gapi":{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"1fa144ec-c040-4a30-8802-99644be1a335","dtypeid":null,"graphid":null,"data":{"name":"transferFrom","signature":"0x23b872dd","signatureString":"transferFrom(address,address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"1ff0f3a2-3fca-4a1c-8b1a-1da5394031af","dtypeid":null,"graphid":null,"data":{"name":"name","signature":"0x06fdde03","signatureString":"name()","gapi":{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"21f06f69-1855-491f-96ec-0b22a6078cf5","dtypeid":null,"graphid":null,"data":{"name":"isMinter","signature":"0xaa271e1a","signatureString":"isMinter(address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isMinter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"28df0bc7-b910-4d6a-9f99-6af0b5b29275","dtypeid":null,"graphid":null,"data":{"name":"mintingFinished","signature":"0x05d2035b","signatureString":"mintingFinished()","gapi":{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"2a7f3995-21ef-40e8-9b8c-54032cf7ad2d","dtypeid":null,"graphid":null,"data":{"name":"addOperator","signature":"0x9870d7fe","signatureString":"addOperator(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"2aeca0c9-299c-4b92-81ba-762c497b912c","dtypeid":null,"graphid":null,"data":{"name":"OperatorAdded","signature":"0xac6fa858","signatureString":"OperatorAdded(address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"OperatorAdded","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"2fb8c17e-6244-42d9-8c70-22bb117c2cfc","dtypeid":null,"graphid":null,"data":{"name":"approveAndCall","signature":"0xcae9ca51","signatureString":"approveAndCall(address,uint256,bytes)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"3624c84d-a0c9-4bda-bdfc-d4083303b973","dtypeid":null,"graphid":null,"data":{"name":"renounceMinter","signature":"0x98650275","signatureString":"renounceMinter()","gapi":{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"386af2f2-6d81-4fb0-9140-a4848ed48ab3","dtypeid":null,"graphid":null,"data":{"name":"decimals","signature":"0x313ce567","signatureString":"decimals()","gapi":{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"418365c6-0997-4516-a348-bf5154ca2465","dtypeid":null,"graphid":null,"data":{"name":"isOperator","signature":"0x6d70f7ae","signatureString":"isOperator(address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isOperator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"424c7b25-f507-4b4a-ac08-5040b2698596","dtypeid":null,"graphid":null,"data":{"name":"transferFromAndCall","signature":"0xd8fbe994","signatureString":"transferFromAndCall(address,address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"43bfd752-115d-4432-8f1f-8a34ac5e59ef","dtypeid":null,"graphid":null,"data":{"name":"symbol","signature":"0x95d89b41","signatureString":"symbol()","gapi":{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"43c1c138-4289-40c4-bac1-8f4b6ea80037","dtypeid":null,"graphid":null,"data":{"name":"owner","signature":"0x8da5cb5b","signatureString":"owner()","gapi":{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"458fc433-5ea2-46cd-8dc8-38dbc280784c","dtypeid":null,"graphid":null,"data":{"name":"isOwner","signature":"0x8f32d59b","signatureString":"isOwner()","gapi":{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"4ecc812a-c2ee-46b6-b579-08d9556dfe86","dtypeid":null,"graphid":null,"data":{"name":"recoverERC20","signature":"0x8980f11f","signatureString":"recoverERC20(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"4f29de7f-85c7-4e3e-9635-9545f9dbadb0","dtypeid":null,"graphid":null,"data":{"name":"renounceOwnership","signature":"0x715018a6","signatureString":"renounceOwnership()","gapi":{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"4fbc9db6-9e0e-4d9e-b8d8-8340359b10fe","dtypeid":null,"graphid":null,"data":{"name":"TransferEnabled","signature":"0x75fce015","signatureString":"TransferEnabled()","gapi":{"anonymous":false,"inputs":[],"name":"TransferEnabled","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"50d257f8-000f-48cd-90e6-b492a325ccfe","dtypeid":null,"graphid":null,"data":{"name":"MinterAdded","signature":"0x6ae17283","signatureString":"MinterAdded(address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterAdded","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"5d05cf96-21c4-44af-aad5-dfc0074f6fd1","dtypeid":null,"graphid":null,"data":{"name":"allowance","signature":"0xdd62ed3e","signatureString":"allowance(address,address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"5f7e7a79-f7d1-4134-89b7-b2f04e3e2947","dtypeid":null,"graphid":null,"data":{"name":"burn","signature":"0x42966c68","signatureString":"burn(uint256)","gapi":{"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"63f33587-7595-4896-ac4a-99ccc8d5d696","dtypeid":null,"graphid":null,"data":{"name":"balanceOf","signature":"0x70a08231","signatureString":"balanceOf(address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"68bba3e4-8a3c-4fb9-aaaa-d1db79e94f6d","dtypeid":null,"graphid":null,"data":{"name":"MintFinished","signature":"0xae5184fb","signatureString":"MintFinished()","gapi":{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"6e72045c-8f1c-4033-9c41-30b0c0697a20","dtypeid":null,"graphid":null,"data":{"name":"removeMinter","signature":"0x3092afd5","signatureString":"removeMinter(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"81a4b05d-cde7-462c-a66b-8dbb1b9cc3a2","dtypeid":null,"graphid":null,"data":{"name":"transferFromAndCall","signature":"0xc1d34b89","signatureString":"transferFromAndCall(address,address,uint256,bytes)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"83be8e02-74c2-4fc9-9c43-543060395601","dtypeid":null,"graphid":null,"data":{"name":"cap","signature":"0x355274ea","signatureString":"cap()","gapi":{"constant":true,"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"96eebfd8-3069-43d5-a82a-4507d331b939","dtypeid":null,"graphid":null,"data":{"name":"approve","signature":"0x095ea7b3","signatureString":"approve(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"995eaaed-f3ff-45a5-b115-7444c8c5a8b9","dtypeid":null,"graphid":null,"data":{"name":"transferOwnership","signature":"0xf2fde38b","signatureString":"transferOwnership(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"a21b5c76-fe45-4826-86aa-92c62c9ebdf5","dtypeid":null,"graphid":null,"data":{"name":"transferAndCall","signature":"0x4000aea0","signatureString":"transferAndCall(address,uint256,bytes)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"ae5ff2c3-fa99-444d-b812-2b2845007d3b","dtypeid":null,"graphid":null,"data":{"name":"addMinter","signature":"0x983b2d56","signatureString":"addMinter(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"b033f141-5819-453f-99d7-dd7907a50558","dtypeid":null,"graphid":null,"data":{"name":"mint","signature":"0x40c10f19","signatureString":"mint(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"b532cbb5-ec38-4cd9-9042-b2239d045a09","dtypeid":null,"graphid":null,"data":{"name":"finishMinting","signature":"0x7d64bcb4","signatureString":"finishMinting()","gapi":{"constant":false,"inputs":[],"name":"finishMinting","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"b9450a96-b1d3-4296-a1a0-e9da64411ef5","dtypeid":null,"graphid":null,"data":{"signature":"0x24f1cf16","signatureString":"(string,string,uint8,uint256,uint256,bool)","gapi":{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint256","name":"cap","type":"uint256"},{"internalType":"uint256","name":"initialSupply","type":"uint256"},{"internalType":"bool","name":"transferEnabled","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"ba1092a7-0800-41df-b7a1-b6c2d1c08d9a","dtypeid":null,"graphid":null,"data":{"name":"Approval","signature":"0x8c5be1e5","signatureString":"Approval(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"bf5103b1-e890-4dcb-8f6a-6d8ed5afce09","dtypeid":null,"graphid":null,"data":{"name":"approveAndCall","signature":"0x3177029f","signatureString":"approveAndCall(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"bfcf9f92-1297-4cb7-b1f9-98762dd8f5ca","dtypeid":null,"graphid":null,"data":{"name":"transfer","signature":"0xa9059cbb","signatureString":"transfer(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"c0ff76c7-ca90-45b5-93a3-0657bf7a1944","dtypeid":null,"graphid":null,"data":{"name":"burnFrom","signature":"0x79cc6790","signatureString":"burnFrom(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"c96e0216-69a9-470f-ae76-d5a0281aecdf","dtypeid":null,"graphid":null,"data":{"name":"totalSupply","signature":"0x18160ddd","signatureString":"totalSupply()","gapi":{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"cbc175dd-f66c-46ef-bbdf-ed3c2b887e98","dtypeid":null,"graphid":null,"data":{"name":"builtOn","signature":"0xb60b7084","signatureString":"builtOn()","gapi":{"constant":true,"inputs":[],"name":"builtOn","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"d5da7fdf-131b-4d3e-a355-6441ccd4312f","dtypeid":null,"graphid":null,"data":{"name":"enableTransfer","signature":"0xf1b50c1d","signatureString":"enableTransfer()","gapi":{"constant":false,"inputs":[],"name":"enableTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"d8eab58d-b949-4c23-a5b2-2d9a04549143","dtypeid":null,"graphid":null,"data":{"name":"MinterRemoved","signature":"0xe94479a9","signatureString":"MinterRemoved(address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterRemoved","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"ed3ff62d-952d-4ec3-a83d-ff3027b7ae97","dtypeid":null,"graphid":null,"data":{"name":"transferEnabled","signature":"0x4cd412d5","signatureString":"transferEnabled()","gapi":{"constant":true,"inputs":[],"name":"transferEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"f4675b40-5f0c-4771-bc85-22a9bc771ddf","dtypeid":null,"graphid":null,"data":{"name":"removeOperator","signature":"0xac8a584a","signatureString":"removeOperator(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"},{"_id":"fc486e6c-7335-4f14-9af0-632140af6a5f","dtypeid":null,"graphid":null,"data":{"name":"OwnershipTransferred","signature":"0x8be0079c","signatureString":"OwnershipTransferred(address,address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}},"metadata":{"chainids":[1],"categories":["solidity"]},"timestamp":"2020-02-22T10:17:49.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"}],"pclassInstances":[{"_id":"99e3591e-2f73-41cf-b527-463026ef10d7","id":267,"pclassid_":"1_519320","ppackageid":null,"dtypeid":null,"data":{"compiler":{"name":"solc","version":"v0.5.15+commit.6a57276f","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"6009805461ffff60a01b1916905560e0604052602f60808181529062002b5660a03980516200003791600b91602090910190620008f9565b503480156200004557600080fd5b5060405162002b8538038062002b85833981810160405260c08110156200006b57600080fd5b81019080805160405193929190846401000000008211156200008c57600080fd5b908301906020820185811115620000a257600080fd5b8251640100000000811182820188101715620000bd57600080fd5b82525081516020918201929091019080838360005b83811015620000ec578181015183820152602001620000d2565b50505050905090810190601f1680156200011a5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013e57600080fd5b9083019060208201858111156200015457600080fd5b82516401000000008111828201881017156200016f57600080fd5b82525081516020918201929091019080838360005b838110156200019e57818101518382015260200162000184565b50505050905090810190601f168015620001cc5780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608090940151885193965090945091879187918791879187918691869186918691869183918791879187916200021e9160009190860190620008f9565b50815162000234906001906020850190620008f9565b506002805460ff191660ff92909216919091179055506200026990506200025a620003e7565b6001600160e01b03620003ec16565b60008111620002bf576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b600755620002d6336001600160e01b036200043e16565b620002e96001600160e01b03620003e716565b600980546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015620003635762000363620003536001600160e01b036200049016565b826001600160e01b036200049f16565b506200038693506301ffc9a760e01b9250506001600160e01b036200053d169050565b620003a1634bbee2df60e01b6001600160e01b036200053d16565b620003bc637dcf646760e11b6001600160e01b036200053d16565b50505050508015620003db57620003db6001600160e01b03620005c216565b5050505050506200099b565b335b90565b620004078160066200066560201b62001dc01790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b620004598160086200066560201b62001dc01790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6009546001600160a01b031690565b600754620004ce82620004ba6001600160e01b03620006f216565b620006f860201b620014731790919060201c565b111562000522576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b6200053982826200075a60201b62001e411760201c565b5050565b6001600160e01b031980821614156200059d576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600a60205260409020805460ff19166001179055565b620005d56001600160e01b036200085f16565b62000627576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6009805460ff60a81b1916600160a81b1790556040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b6200067a82826001600160e01b036200089016565b15620006cd576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60055490565b60008282018381101562000753576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216620007b6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620007d281600554620006f860201b620014731790919060201c565b6005556001600160a01b0382166000908152600360209081526040909120546200080791839062001473620006f8821b17901c565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6009546000906001600160a01b0316620008816001600160e01b03620003e716565b6001600160a01b031614905090565b60006001600160a01b038216620008d95760405162461bcd60e51b815260040180806020018281038252602281526020018062002b346022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200093c57805160ff19168380011785556200096c565b828001600101855582156200096c579182015b828111156200096c5782518255916020019190600101906200094f565b506200097a9291506200097e565b5090565b620003e991905b808211156200097a576000815560010162000985565b61218980620009ab6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806379cc67901161013b578063a9059cbb116100b8578063cae9ca511161007c578063cae9ca511461081d578063d8fbe994146108d8578063dd62ed3e1461090e578063f1b50c1d1461093c578063f2fde38b1461094457610248565b8063a9059cbb146106d7578063aa271e1a14610703578063ac8a584a14610729578063b60b70841461074f578063c1d34b891461075757610248565b806395d89b41116100ff57806395d89b411461064f578063983b2d5614610657578063986502751461067d5780639870d7fe14610685578063a457c2d7146106ab57610248565b806379cc6790146105c35780637d64bcb4146105ef5780638980f11f146105f75780638da5cb5b146106235780638f32d59b1461064757610248565b80633177029f116101c957806342966c681161018d57806342966c681461054a5780634cd412d5146105675780636d70f7ae1461056f57806370a0823114610595578063715018a6146105bb57610248565b80633177029f14610403578063355274ea1461042f57806339509351146104375780634000aea01461046357806340c10f191461051e57610248565b806318160ddd1161021057806318160ddd1461036557806323b872dd1461037f5780632ab6f8db146103b55780633092afd5146103bf578063313ce567146103e557610248565b806301ffc9a71461024d57806305d2035b1461028857806306fdde0314610290578063095ea7b31461030d5780631296ee6214610339575b600080fd5b6102746004803603602081101561026357600080fd5b50356001600160e01b03191661096a565b604080519115158252519081900360200190f35b610274610989565b610298610999565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d25781810151838201526020016102ba565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102746004803603604081101561032357600080fd5b506001600160a01b038135169060200135610a2f565b6102746004803603604081101561034f57600080fd5b506001600160a01b038135169060200135610a4c565b61036d610a6f565b60408051918252519081900360200190f35b6102746004803603606081101561039557600080fd5b506001600160a01b03813581169160208101359091169060400135610a75565b6103bd610ab3565b005b6103bd600480360360208110156103d557600080fd5b50356001600160a01b0316610abe565b6103ed610b11565b6040805160ff9092168252519081900360200190f35b6102746004803603604081101561041957600080fd5b506001600160a01b038135169060200135610b1a565b61036d610b36565b6102746004803603604081101561044d57600080fd5b506001600160a01b038135169060200135610b3c565b6102746004803603606081101561047957600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156104a957600080fd5b8201836020820111156104bb57600080fd5b803590602001918460018302840111640100000000831117156104dd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b95945050505050565b6102746004803603604081101561053457600080fd5b506001600160a01b038135169060200135610bc9565b6103bd6004803603602081101561056057600080fd5b5035610bed565b610274610bfe565b6102746004803603602081101561058557600080fd5b50356001600160a01b0316610c0e565b61036d600480360360208110156105ab57600080fd5b50356001600160a01b0316610c27565b6103bd610c42565b6103bd600480360360408110156105d957600080fd5b506001600160a01b038135169060200135610cd3565b6103bd610ce1565b6103bd6004803603604081101561060d57600080fd5b506001600160a01b038135169060200135610d7d565b61062b610e5b565b604080516001600160a01b039092168252519081900360200190f35b610274610e6a565b610298610e90565b6103bd6004803603602081101561066d57600080fd5b50356001600160a01b0316610ef0565b6103bd610f44565b6103bd6004803603602081101561069b57600080fd5b50356001600160a01b0316610f54565b610274600480360360408110156106c157600080fd5b506001600160a01b038135169060200135610f6f565b610274600480360360408110156106ed57600080fd5b506001600160a01b038135169060200135610fdd565b6102746004803603602081101561071957600080fd5b50356001600160a01b0316611019565b6103bd6004803603602081101561073f57600080fd5b50356001600160a01b031661102c565b61029861107c565b6102746004803603608081101561076d57600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156107a857600080fd5b8201836020820111156107ba57600080fd5b803590602001918460018302840111640100000000831117156107dc57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061110a945050505050565b6102746004803603606081101561083357600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561086357600080fd5b82018360208201111561087557600080fd5b8035906020019184600183028401116401000000008311171561089757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611140945050505050565b610274600480360360608110156108ee57600080fd5b506001600160a01b03813581169160208101359091169060400135611158565b61036d6004803603604081101561092457600080fd5b506001600160a01b0381358116916020013516611175565b6103bd6111a0565b6103bd6004803603602081101561095a57600080fd5b50356001600160a01b0316611225565b6001600160e01b0319166000908152600a602052604090205460ff1690565b600954600160a01b900460ff1690565b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b5050505050905090565b6000610a43610a3c611275565b8484611279565b50600192915050565b6000610a68838360405180602001604052806000815250610b95565b9392505050565b60055490565b6009546000908490600160a81b900460ff1680610a965750610a9681610c0e565b610a9f57600080fd5b610aaa858585611365565b95945050505050565b610abc336113e3565b565b610ac6610e6a565b610b05576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e8161142b565b50565b60025460ff1690565b6000610a68838360405180602001604052806000815250611140565b60075490565b6000610a43610b49611275565b84610b908560046000610b5a611275565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61147316565b611279565b6000610ba18484610fdd565b610baa57600080fd5b610bb6338585856114cd565b610bbf57600080fd5b5060019392505050565b600954600090600160a01b900460ff1615610be357600080fd5b610a688383611600565b610b0e610bf8611275565b82611652565b600954600160a81b900460ff1690565b6000610c2160088363ffffffff61174e16565b92915050565b6001600160a01b031660009081526003602052604090205490565b610c4a610e6a565b610c89576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b6009546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600980546001600160a01b0319169055565b610cdd82826117b5565b5050565b610ce9610e6a565b610d28576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b600954600160a01b900460ff1615610d3f57600080fd5b6009805460ff60a01b1916600160a01b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a1565b610d85610e6a565b610dc4576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b816001600160a01b031663a9059cbb610ddb610e5b565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505050506040513d6020811015610e5557600080fd5b50505050565b6009546001600160a01b031690565b6009546000906001600160a01b0316610e81611275565b6001600160a01b031614905090565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a255780601f106109fa57610100808354040283529160200191610a25565b610f00610efb611275565b611019565b610f3b5760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe76030913960400191505060405180910390fd5b610b0e81611809565b610abc610f4f611275565b61142b565b610f5d33610c0e565b610f6657600080fd5b610b0e81611851565b6000610a43610f7c611275565b84610b90856040518060600160405280602581526020016121306025913960046000610fa6611275565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61189916565b6009546000903390600160a81b900460ff1680610ffe5750610ffe81610c0e565b61100757600080fd5b6110118484611930565b949350505050565b6000610c2160068363ffffffff61174e16565b611034610e6a565b611073576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e816113e3565b600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156111025780601f106110d757610100808354040283529160200191611102565b820191906000526020600020905b8154815290600101906020018083116110e557829003601f168201915b505050505081565b6000611117858585610a75565b61112057600080fd5b61112c858585856114cd565b61113557600080fd5b506001949350505050565b600061114c8484610a2f565b50610bb6848484611944565b60006110118484846040518060200160405280600081525061110a565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6111a8610e6a565b6111e7576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b6009805460ff60a81b1916600160a81b1790556040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b61122d610e6a565b61126c576040805162461bcd60e51b81526020600482018190526024820152600080516020612060833981519152604482015290519081900360640190fd5b610b0e81611a69565b3390565b6001600160a01b0383166112be5760405162461bcd60e51b815260040180806020018281038252602481526020018061210c6024913960400191505060405180910390fd5b6001600160a01b0382166113035760405162461bcd60e51b8152600401808060200182810382526022815260200180611f9f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000611372848484611b0a565b610bbf8461137e611275565b610b9085604051806060016040528060288152602001612038602891396001600160a01b038a166000908152600460205260408120906113bc611275565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61189916565b6113f460088263ffffffff611c6816565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b61143c60068263ffffffff611c6816565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600082820183811015610a68576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006114e1846001600160a01b0316611ccf565b6114ed57506000611011565b604051632229f29760e21b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a16946388a7ca5c9490938c938b938b939260a4019060208501908083838e5b8381101561156757818101518382015260200161154f565b50505050905090810190601f1680156115945780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d60208110156115e057600080fd5b50516001600160e01b031916632229f29760e21b14915050949350505050565b600061160d610efb611275565b6116485760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe76030913960400191505060405180910390fd5b610a438383611d06565b6001600160a01b0382166116975760405162461bcd60e51b81526004018080602001828103825260218152602001806120c66021913960400191505060405180910390fd5b6116da81604051806060016040528060228152602001611f57602291396001600160a01b038516600090815260036020526040902054919063ffffffff61189916565b6001600160a01b038316600090815260036020526040902055600554611706908263ffffffff611d7e16565b6005556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006001600160a01b0382166117955760405162461bcd60e51b81526004018080602001828103825260228152602001806120806022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6117bf8282611652565b610cdd826117cb611275565b610b90846040518060600160405280602481526020016120a2602491396001600160a01b0388166000908152600460205260408120906113bc611275565b61181a60068263ffffffff611dc016565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61186260088263ffffffff611dc016565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b600081848411156119285760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118ed5781810151838201526020016118d5565b50505050905090810190601f16801561191a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000610a4361193d611275565b8484611b0a565b6000611958846001600160a01b0316611ccf565b61196457506000610a68565b6040516307b04a2d60e41b81523360048201818152602483018690526060604484019081528551606485015285516000946001600160a01b038a1694637b04a2d09490938a938a936084019060208501908083838d5b838110156119d25781810151838201526020016119ba565b50505050905090810190601f1680156119ff5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b505050506040513d6020811015611a4a57600080fd5b50516001600160e01b0319166307b04a2d60e41b149150509392505050565b6001600160a01b038116611aae5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f796026913960400191505060405180910390fd5b6009546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316611b4f5760405162461bcd60e51b81526004018080602001828103825260258152602001806120e76025913960400191505060405180910390fd5b6001600160a01b038216611b945760405162461bcd60e51b8152600401808060200182810382526023815260200180611f346023913960400191505060405180910390fd5b611bd781604051806060016040528060268152602001611fc1602691396001600160a01b038616600090815260036020526040902054919063ffffffff61189916565b6001600160a01b038085166000908152600360205260408082209390935590841681522054611c0c908263ffffffff61147316565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611c72828261174e565b611cad5760405162461bcd60e51b81526004018080602001828103825260218152602001806120176021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906110115750141592915050565b600754611d2182611d15610a6f565b9063ffffffff61147316565b1115611d74576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b610cdd8282611e41565b6000610a6883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611899565b611dca828261174e565b15611e1c576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038216611e9c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b600554611eaf908263ffffffff61147316565b6005556001600160a01b038216600090815260036020526040902054611edb908263ffffffff61147316565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526f6c65733a206163636f756e7420697320746865207a65726f206164647265737345524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582084001a10073f76e909619ca9197058de11ef66f5023cb4494056dfe6ba14f46864736f6c634300050f0032526f6c65733a206163636f756e7420697320746865207a65726f206164647265737368747470733a2f2f766974746f6d696e61636f72692e6769746875622e696f2f65726332302d67656e657261746f7200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000034e6577000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e45570000000000000000000000000000000000000000000000000000000000","extra":{"sourcemap":"56439:496:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;56439:496:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27896:135;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27896:135:0;-1:-1:-1;;;;;;27896:135:0;;:::i;:::-;;;;;;;;;;;;;;;;;;52915:96;;;:::i;41682:83::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;41682:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20385:152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;20385:152:0;;;;;;;;:::i;38085:130::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38085:130:0;;;;;;;;:::i;19406:91::-;;;:::i;:::-;;;;;;;;;;;;;;;;54312:164;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;54312:164:0;;;;;;;;;;;;;;;;;:::i;50844:81::-;;;:::i;:::-;;55228:97;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;55228:97:0;-1:-1:-1;;;;;55228:97:0;;:::i;42534:83::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;38891:138;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38891:138:0;;;;;;;;:::i;45938:75::-;;;:::i;21722:210::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;21722:210:0;;;;;;;;:::i;38223:232::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;38223:232:0;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;38223:232:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;38223:232:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;38223:232:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;38223:232:0;;-1:-1:-1;38223:232:0;;-1:-1:-1;;;;;38223:232:0:i;53435:118::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;53435:118:0;;;;;;;;:::i;46812:83::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;46812:83:0;;:::i;53084:96::-;;;:::i;50617:113::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;50617:113:0;-1:-1:-1;;;;;50617:113:0;;:::i;19560:110::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19560:110:0;-1:-1:-1;;;;;19560:110:0;;:::i;48764:140::-;;;:::i;46957:103::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;46957:103:0;;;;;;;;:::i;54552:124::-;;;:::i;50020:152::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;50020:152:0;;;;;;;;:::i;47953:79::-;;;:::i;:::-;;;;-1:-1:-1;;;;;47953:79:0;;;;;;;;;;;;;;48319:94;;;:::i;41884:87::-;;;:::i;44281:92::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;44281:92:0;-1:-1:-1;;;;;44281:92:0;;:::i;44381:79::-;;;:::i;50738:98::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;50738:98:0;-1:-1:-1;;;;;50738:98:0;;:::i;22435:261::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;22435:261:0;;;;;;;;:::i;53801:142::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;53801:142:0;;;;;;;;:::i;44164:109::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;44164:109:0;-1:-1:-1;;;;;44164:109:0;;:::i;54995:101::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;54995:101:0;-1:-1:-1;;;;;54995:101:0;;:::i;56488:73::-;;;:::i;38629:254::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;38629:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;38629:254:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;38629:254:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;38629:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;38629:254:0;;-1:-1:-1;38629:254:0;;-1:-1:-1;;;;;38629:254:0:i;39037:223::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;39037:223:0;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;39037:223:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;39037:223:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;39037:223:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;39037:223:0;;-1:-1:-1;39037:223:0;;-1:-1:-1;;;;;39037:223:0:i;38463:158::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;38463:158:0;;;;;;;;;;;;;;;;;:::i;20104:134::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;20104:134:0;;;;;;;;;;:::i;54741:120::-;;;:::i;49059:109::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;49059:109:0;-1:-1:-1;;;;;49059:109:0;;:::i;27896:135::-;-1:-1:-1;;;;;;27990:33:0;27966:4;27990:33;;;:20;:33;;;;;;;;;27896:135::o;52915:96::-;52987:16;;-1:-1:-1;;;52987:16:0;;;;;52915:96::o;41682:83::-;41752:5;41745:12;;;;;;;;-1:-1:-1;;41745:12:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41719:13;;41745:12;;41752:5;;41745:12;;41752:5;41745:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41682:83;:::o;20385:152::-;20451:4;20468:39;20477:12;:10;:12::i;:::-;20491:7;20500:6;20468:8;:39::i;:::-;-1:-1:-1;20525:4:0;20385:152;;;;:::o;38085:130::-;38153:4;38177:30;38193:2;38197:5;38177:30;;;;;;;;;;;;:15;:30::i;:::-;38170:37;38085:130;-1:-1:-1;;;38085:130:0:o;19406:91::-;19477:12;;19406:91;:::o;54312:164::-;52099:16;;54409:4;;54394;;-1:-1:-1;;;52099:16:0;;;;;:36;;;52119:16;52130:4;52119:10;:16::i;:::-;52091:45;;;;;;54433:35;54452:4;54458:2;54462:5;54433:18;:35::i;:::-;54426:42;54312:164;-1:-1:-1;;;;;54312:164:0:o;50844:81::-;50890:27;50906:10;50890:15;:27::i;:::-;50844:81::o;55228:97::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;55295:22;55309:7;55295:13;:22::i;:::-;55228:97;:::o;42534:83::-;42600:9;;;;42534:83;:::o;38891:138::-;38963:4;38987:34;39002:7;39011:5;38987:34;;;;;;;;;;;;:14;:34::i;45938:75::-;46001:4;;45938:75;:::o;21722:210::-;21802:4;21819:83;21828:12;:10;:12::i;:::-;21842:7;21851:50;21890:10;21851:11;:25;21863:12;:10;:12::i;:::-;-1:-1:-1;;;;;21851:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;21851:25:0;;;:34;;;;;;;;;;;:50;:38;:50;:::i;:::-;21819:8;:83::i;38223:232::-;38310:4;38335:19;38344:2;38348:5;38335:8;:19::i;:::-;38327:28;;;;;;38374:50;38396:10;38408:2;38412:5;38419:4;38374:21;:50::i;:::-;38366:59;;;;;;-1:-1:-1;38443:4:0;38223:232;;;;;:::o;53435:118::-;51882:16;;53500:4;;-1:-1:-1;;;51882:16:0;;;;51881:17;51873:26;;;;;;53524:21;53535:2;53539:5;53524:10;:21::i;46812:83::-;46860:27;46866:12;:10;:12::i;:::-;46880:6;46860:5;:27::i;53084:96::-;53156:16;;-1:-1:-1;;;53156:16:0;;;;;53084:96::o;50617:113::-;50675:4;50699:23;:10;50714:7;50699:23;:14;:23;:::i;:::-;50692:30;50617:113;-1:-1:-1;;50617:113:0:o;19560:110::-;-1:-1:-1;;;;;19644:18:0;19617:7;19644:18;;;:9;:18;;;;;;;19560:110::o;48764:140::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;48847:6;;48826:40;;48863:1;;-1:-1:-1;;;;;48847:6:0;;48826:40;;48863:1;;48826:40;48877:6;:19;;-1:-1:-1;;;;;;48877:19:0;;;48764:140::o;46957:103::-;47026:26;47036:7;47045:6;47026:9;:26::i;:::-;46957:103;;:::o;54552:124::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;51882:16;;-1:-1:-1;;;51882:16:0;;;;51881:17;51873:26;;;;;;54613:16;:23;;-1:-1:-1;;;;54613:23:0;-1:-1:-1;;;54613:23:0;;;54654:14;;;;54613:23;;54654:14;54552:124::o;50020:152::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;50120:12;-1:-1:-1;;;;;50113:29:0;;50143:7;:5;:7::i;:::-;50152:11;50113:51;;;;;;;;;;;;;-1:-1:-1;;;;;50113:51:0;-1:-1:-1;;;;;50113:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;50113:51:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;50113:51:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;50020:152:0:o;47953:79::-;48018:6;;-1:-1:-1;;;;;48018:6:0;47953:79;:::o;48319:94::-;48399:6;;48359:4;;-1:-1:-1;;;;;48399:6:0;48383:12;:10;:12::i;:::-;-1:-1:-1;;;;;48383:22:0;;48376:29;;48319:94;:::o;41884:87::-;41956:7;41949:14;;;;;;;;-1:-1:-1;;41949:14:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41923:13;;41949:14;;41956:7;;41949:14;;41956:7;41949:14;;;;;;;;;;;;;;;;;;;;;;;;44281:92;44061:22;44070:12;:10;:12::i;:::-;44061:8;:22::i;:::-;44053:83;;;;-1:-1:-1;;;44053:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44346:19;44357:7;44346:10;:19::i;44381:79::-;44425:27;44439:12;:10;:12::i;:::-;44425:13;:27::i;50738:98::-;50566:22;50577:10;50566;:22::i;:::-;50558:31;;;;;;50807:21;50820:7;50807:12;:21::i;22435:261::-;22520:4;22537:129;22546:12;:10;:12::i;:::-;22560:7;22569:96;22608:15;22569:96;;;;;;;;;;;;;;;;;:11;:25;22581:12;:10;:12::i;:::-;-1:-1:-1;;;;;22569:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;22569:25:0;;;:34;;;;;;;;;;;:96;;:38;:96;:::i;53801:142::-;52099:16;;53886:4;;53865:10;;-1:-1:-1;;;52099:16:0;;;;;:36;;;52119:16;52130:4;52119:10;:16::i;:::-;52091:45;;;;;;53910:25;53925:2;53929:5;53910:14;:25::i;:::-;53903:32;53801:142;-1:-1:-1;;;;53801:142:0:o;44164:109::-;44220:4;44244:21;:8;44257:7;44244:21;:12;:21;:::i;54995:101::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;55064:24;55080:7;55064:15;:24::i;56488:73::-;;;;;;;;;;;;;;;-1:-1:-1;;56488:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;38629:254::-;38734:4;38759:29;38772:4;38778:2;38782:5;38759:12;:29::i;:::-;38751:38;;;;;;38808:44;38830:4;38836:2;38840:5;38847:4;38808:21;:44::i;:::-;38800:53;;;;;;-1:-1:-1;38871:4:0;38629:254;;;;;;:::o;39037:223::-;39128:4;39145:23;39153:7;39162:5;39145:7;:23::i;:::-;;39187:42;39208:7;39217:5;39224:4;39187:20;:42::i;38463:158::-;38549:4;38573:40;38593:4;38599:2;38603:5;38573:40;;;;;;;;;;;;:19;:40::i;20104:134::-;-1:-1:-1;;;;;20203:18:0;;;20176:7;20203:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;20104:134::o;54741:120::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;54795:16;:23;;-1:-1:-1;;;;54795:23:0;-1:-1:-1;;;54795:23:0;;;54836:17;;;;54795:23;;54836:17;54741:120::o;49059:109::-;48165:9;:7;:9::i;:::-;48157:54;;;;;-1:-1:-1;;;48157:54:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;48157:54:0;;;;;;;;;;;;;;;49132:28;49151:8;49132:18;:28::i;9194:98::-;9274:10;9194:98;:::o;25367:338::-;-1:-1:-1;;;;;25461:19:0;;25453:68;;;;-1:-1:-1;;;25453:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;25540:21:0;;25532:68;;;;-1:-1:-1;;;25532:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;25613:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;25665:32;;;;;;;;;;;;;;;;;25367:338;;;:::o;21009:304::-;21098:4;21115:36;21125:6;21133:9;21144:6;21115:9;:36::i;:::-;21162:121;21171:6;21179:12;:10;:12::i;:::-;21193:89;21231:6;21193:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;21193:19:0;;;;;;:11;:19;;;;;;21213:12;:10;:12::i;:::-;-1:-1:-1;;;;;21193:33:0;;;;;;;;;;;;-1:-1:-1;21193:33:0;;;:89;;:37;:89;:::i;51069:136::-;51131:26;:10;51149:7;51131:26;:17;:26;:::i;:::-;51173:24;;-1:-1:-1;;;;;51173:24:0;;;;;;;;51069:136;:::o;44598:130::-;44658:24;:8;44674:7;44658:24;:15;:24;:::i;:::-;44698:22;;-1:-1:-1;;;;;44698:22:0;;;;;;;;44598:130;:::o;13271:181::-;13329:7;13361:5;;;13385:6;;;;13377:46;;;;;-1:-1:-1;;;13377:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;39816:362;39925:4;39947:15;:2;-1:-1:-1;;;;;39947:13:0;;:15::i;:::-;39942:61;;-1:-1:-1;39986:5:0;39979:12;;39942:61;40029:94;;-1:-1:-1;;;40029:94:0;;40083:10;40029:94;;;;;;-1:-1:-1;;;;;40029:94:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;40013:13;;40029:39;;;;;;40083:10;;40095:4;;40101:5;;40108:4;;40029:94;;;;;;;;;;;40013:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;40029:94:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40029:94:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40029:94:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40029:94:0;-1:-1:-1;;;;;;40142:27:0;-1:-1:-1;;;40142:27:0;;-1:-1:-1;;39816:362:0;;;;;;:::o;45225:143::-;45299:4;44061:22;44070:12;:10;:12::i;44061:22::-;44053:83;;;;-1:-1:-1;;;44053:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45316:22;45322:7;45331:6;45316:5;:22::i;24579:348::-;-1:-1:-1;;;;;24655:21:0;;24647:67;;;;-1:-1:-1;;;24647:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24748:68;24771:6;24748:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;24748:18:0;;;;;;:9;:18;;;;;;;:68;;:22;:68;:::i;:::-;-1:-1:-1;;;;;24727:18:0;;;;;;:9;:18;;;;;:89;24842:12;;:24;;24859:6;24842:24;:16;:24;:::i;:::-;24827:12;:39;24882:37;;;;;;;;24908:1;;-1:-1:-1;;;;;24882:37:0;;;;;;;;;;;;24579:348;;:::o;43460:203::-;43532:4;-1:-1:-1;;;;;43557:21:0;;43549:68;;;;-1:-1:-1;;;43549:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;43635:20:0;:11;:20;;;;;;;;;;;;;;;43460:203::o;25891:232::-;25963:22;25969:7;25978:6;25963:5;:22::i;:::-;25996:119;26005:7;26014:12;:10;:12::i;:::-;26028:86;26067:6;26028:86;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;26028:20:0;;;;;;:11;:20;;;;;;26049:12;:10;:12::i;44468:122::-;44525:21;:8;44538:7;44525:21;:12;:21;:::i;:::-;44562:20;;-1:-1:-1;;;;;44562:20:0;;;;;;;;44468:122;:::o;50933:128::-;50992:23;:10;51007:7;50992:23;:14;:23;:::i;:::-;51031:22;;-1:-1:-1;;;;;51031:22:0;;;;;;;;50933:128;:::o;14200:192::-;14286:7;14322:12;14314:6;;;;14306:29;;;;-1:-1:-1;;;14306:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14306:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;14358:5:0;;;14200:192::o;19883:158::-;19952:4;19969:42;19979:12;:10;:12::i;:::-;19993:9;20004:6;19969:9;:42::i;40637:355::-;40736:4;40758:20;:7;-1:-1:-1;;;;;40758:18:0;;:20::i;:::-;40753:66;;-1:-1:-1;40802:5:0;40795:12;;40753:66;40845:92;;-1:-1:-1;;;40845:92:0;;40903:10;40845:92;;;;;;;;;;;;;;;;;;;;;;;;;;;40829:13;;-1:-1:-1;;;;;40845:43:0;;;;;40903:10;;40915:5;;40922:4;;40845:92;;;;;;;;;;40829:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;40845:92:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40845:92:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40845:92:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40845:92:0;-1:-1:-1;;;;;;40956:27:0;-1:-1:-1;;;40956:27:0;;-1:-1:-1;;40637:355:0;;;;;:::o;49274:229::-;-1:-1:-1;;;;;49348:22:0;;49340:73;;;;-1:-1:-1;;;49340:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49450:6;;49429:38;;-1:-1:-1;;;;;49429:38:0;;;;49450:6;;49429:38;;49450:6;;49429:38;49478:6;:17;;-1:-1:-1;;;;;;49478:17:0;-1:-1:-1;;;;;49478:17:0;;;;;;;;;;49274:229::o;23186:471::-;-1:-1:-1;;;;;23284:20:0;;23276:70;;;;-1:-1:-1;;;23276:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;23365:23:0;;23357:71;;;;-1:-1:-1;;;23357:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23461;23483:6;23461:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;23461:17:0;;;;;;:9;:17;;;;;;;:71;;:21;:71;:::i;:::-;-1:-1:-1;;;;;23441:17:0;;;;;;;:9;:17;;;;;;:91;;;;23566:20;;;;;;;:32;;23591:6;23566:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;23543:20:0;;;;;;;:9;:20;;;;;;;;;:55;;;;23614:35;;;;;;;23543:20;;23614:35;;;;;;;;;;;;;23186:471;;;:::o;43182:183::-;43262:18;43266:4;43272:7;43262:3;:18::i;:::-;43254:64;;;;-1:-1:-1;;;43254:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;43329:20:0;43352:5;43329:20;;;;;;;;;;;:28;;-1:-1:-1;;43329:28:0;;;43182:183::o;629:810::-;689:4;1348:20;;1191:66;1388:15;;;;;:42;;-1:-1:-1;1407:23:0;;;1380:51;-1:-1:-1;;629:810:0:o;46186:183::-;46289:4;;46261:24;46279:5;46261:13;:11;:13::i;:::-;:17;:24;:17;:24;:::i;:::-;:32;;46253:70;;;;;-1:-1:-1;;;46253:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;46334:27;46346:7;46355:5;46334:11;:27::i;13727:136::-;13785:7;13812:43;13816:1;13819;13812:43;;;;;;;;;;;;;;;;;:3;:43::i;42924:178::-;43002:18;43006:4;43012:7;43002:3;:18::i;:::-;43001:19;42993:63;;;;;-1:-1:-1;;;42993:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;43067:20:0;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;43067:27:0;43090:4;43067:27;;;42924:178::o;23938:308::-;-1:-1:-1;;;;;24014:21:0;;24006:65;;;;;-1:-1:-1;;;24006:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;24099:12;;:24;;24116:6;24099:24;:16;:24;:::i;:::-;24084:12;:39;-1:-1:-1;;;;;24155:18:0;;;;;;:9;:18;;;;;;:30;;24178:6;24155:30;:22;:30;:::i;:::-;-1:-1:-1;;;;;24134:18:0;;;;;;:9;:18;;;;;;;;:51;;;;24201:37;;;;;;;24134:18;;;;24201:37;;;;;;;;;;23938:308;;:::o"}}},"deployment":{"address":"0xd0650ceeaeacd043b9b92982de813c1f0f7f76c9","txhash":"0xff0305d33ea494cabfc00cb9b708637108ef2c385abb68d3fbc72b158076b23c","block":9442318,"constructorArgs":null,"chainid":1}},"metadata":{"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:18:20.000Z","pclassid":"0020ae16-0690-4443-86b1-a69c8c34d85d"}]},{"_id":"0021e876-d920-4d36-b1b2-cadac6768910","id":"4_207943","dtypeid":null,"data":{"name":"ERC20","license":"None","gapi":[{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"sourceByLanguage":{"0":{"sourcesTemp":{"ERC20":"/**\n *Submitted for verification at Etherscan.io on 2020-02-01\n*/\n\npragma solidity ^0.5.4;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract NiceToken is ERC20 {\n    string public constant name = \"NiceToken\"; // solium-disable-line uppercase\n    string public constant symbol = \"NICE\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n    uint256 public constant initialSupply = 21000000 * (10 ** uint256(decimals));\n    \n    constructor() public {\n        super._mint(msg.sender, initialSupply);\n        owner = msg.sender;\n    }\n\n    //ownership\n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0), \"Already owner\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    //pausable\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n    \n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Paused by owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"Not paused now\");\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    //freezable\n    event Frozen(address target);\n    event Unfrozen(address target);\n\n    mapping(address => bool) internal freezes;\n\n    modifier whenNotFrozen() {\n        require(!freezes[msg.sender], \"Sender account is locked.\");\n        _;\n    }\n\n    function freeze(address _target) public onlyOwner {\n        freezes[_target] = true;\n        emit Frozen(_target);\n    }\n\n    function unfreeze(address _target) public onlyOwner {\n        freezes[_target] = false;\n        emit Unfrozen(_target);\n    }\n\n    function isFrozen(address _target) public view returns (bool) {\n        return freezes[_target];\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n      public\n      whenNotFrozen\n      whenNotPaused\n      returns (bool)\n    {\n        releaseLock(msg.sender);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n      public\n      whenNotPaused\n      returns (bool)\n    {\n        require(!freezes[_from], \"From account is locked.\");\n        releaseLock(_from);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    //mintable\n    event Mint(address indexed to, uint256 amount);\n\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n      public\n      onlyOwner\n      returns (bool)\n    {\n        super._mint(_to, _amount);\n        emit Mint(_to, _amount);\n        return true;\n    }\n\n    //burnable\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(address _who, uint256 _value) public onlyOwner {\n        require(_value <= super.balanceOf(_who), \"Balance is too small.\");\n\n        _burn(_who, _value);\n        emit Burn(_who, _value);\n    }\n\n    //lockable\n    struct LockInfo {\n        uint256 releaseTime;\n        uint256 balance;\n    }\n    mapping(address => LockInfo[]) internal lockInfo;\n\n    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n    event Unlock(address indexed holder, uint256 value);\n\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        uint256 lockedBalance = 0;\n        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n            lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);\n        }\n        return super.balanceOf(_holder).add(lockedBalance);\n    }\n\n    function releaseLock(address _holder) internal {\n\n        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n            if (lockInfo[_holder][i].releaseTime <= now) {\n                _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n                emit Unlock(_holder, lockInfo[_holder][i].balance);\n                lockInfo[_holder][i].balance = 0;\n\n                if (i != lockInfo[_holder].length - 1) {\n                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n                    i--;\n                }\n                lockInfo[_holder].length--;\n\n            }\n        }\n    }\n    function lockCount(address _holder) public view returns (uint256) {\n        return lockInfo[_holder].length;\n    }\n    function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {\n        return (lockInfo[_holder][_idx].releaseTime, lockInfo[_holder][_idx].balance);\n    }\n\n    function lock(address _holder, uint256 _amount, uint256 _releaseTime) public onlyOwner {\n        require(super.balanceOf(_holder) >= _amount, \"Balance is too small.\");\n        _balances[_holder] = _balances[_holder].sub(_amount);\n        lockInfo[_holder].push(\n            LockInfo(_releaseTime, _amount)\n        );\n        emit Lock(_holder, _amount, _releaseTime);\n    }\n\n    function lockAfter(address _holder, uint256 _amount, uint256 _afterTime) public onlyOwner {\n        require(super.balanceOf(_holder) >= _amount, \"Balance is too small.\");\n        _balances[_holder] = _balances[_holder].sub(_amount);\n        lockInfo[_holder].push(\n            LockInfo(now + _afterTime, _amount)\n        );\n        emit Lock(_holder, _amount, now + _afterTime);\n    }\n\n    function unlock(address _holder, uint256 i) public onlyOwner {\n        require(i < lockInfo[_holder].length, \"No lock information.\");\n\n        _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n        emit Unlock(_holder, lockInfo[_holder][i].balance);\n        lockInfo[_holder][i].balance = 0;\n\n        if (i != lockInfo[_holder].length - 1) {\n            lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n        }\n        lockInfo[_holder].length--;\n    }\n\n    function transferWithLock(address _to, uint256 _value, uint256 _releaseTime) public onlyOwner returns (bool) {\n        require(_to != address(0), \"wrong address\");\n        require(_value <= super.balanceOf(owner), \"Not enough balance\");\n\n        _balances[owner] = _balances[owner].sub(_value);\n        lockInfo[_to].push(\n            LockInfo(_releaseTime, _value)\n        );\n        emit Transfer(owner, _to, _value);\n        emit Lock(_to, _value, _releaseTime);\n\n        return true;\n    }\n\n    function transferWithLockAfter(address _to, uint256 _value, uint256 _afterTime) public onlyOwner returns (bool) {\n        require(_to != address(0), \"wrong address\");\n        require(_value <= super.balanceOf(owner), \"Not enough balance\");\n\n        _balances[owner] = _balances[owner].sub(_value);\n        lockInfo[_to].push(\n            LockInfo(now + _afterTime, _value)\n        );\n        emit Transfer(owner, _to, _value);\n        emit Lock(_to, _value, now + _afterTime);\n\n        return true;\n    }\n\n    function currentTime() public view returns (uint256) {\n        return now;\n    }\n\n    function afterTime(uint256 _value) public view returns (uint256) {\n        return now + _value;\n    }\n}"},"compiler":{"name":"solc","version":"v0.5.4+commit.9549d8ff","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"608060405234801561001057600080fd5b506105dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161007857806370a0823114610166578063a457c2d71461018c578063a9059cbb146101b8578063dd62ed3e146101e4576100a5565b8063095ea7b3146100aa57806318160ddd146100ea57806323b872dd14610104578063395093511461013a575b600080fd5b6100d6600480360360408110156100c057600080fd5b50600160a060020a038135169060200135610212565b604080519115158252519081900360200190f35b6100f2610290565b60408051918252519081900360200190f35b6100d66004803603606081101561011a57600080fd5b50600160a060020a03813581169160208101359091169060400135610296565b6100d66004803603604081101561015057600080fd5b50600160a060020a03813516906020013561035f565b6100f26004803603602081101561017c57600080fd5b5035600160a060020a031661040f565b6100d6600480360360408110156101a257600080fd5b50600160a060020a03813516906020013561042a565b6100d6600480360360408110156101ce57600080fd5b50600160a060020a038135169060200135610475565b6100f2600480360360408110156101fa57600080fd5b50600160a060020a038135811691602001351661048b565b6000600160a060020a038316151561022957600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546102ca908363ffffffff6104b616565b600160a060020a03851660009081526001602090815260408083203384529091529020556102f98484846104cb565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561037657600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff61059816565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561044157600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff6104b616565b60006104823384846104cb565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156104c557600080fd5b50900390565b600160a060020a03821615156104e057600080fd5b600160a060020a038316600090815260208190526040902054610509908263ffffffff6104b616565b600160a060020a03808516600090815260208190526040808220939093559084168152205461053e908263ffffffff61059816565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105aa57600080fd5b939250505056fea165627a7a7230582090e743b30ef56632c80c1261ed15907f60c9057c6accc19304b3f3e5bd2a763a0029","extra":{"sourcemap":"3258:7117:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3258:7117:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5399:244;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5399:244:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3558:91;;;:::i;:::-;;;;;;;;;;;;;;;;6116:299;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6116:299:0;;;;;;;;;;;;;;;;;:::i;6930:323::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6930:323:0;;;;;;;;:::i;3865:106::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3865:106:0;-1:-1:-1;;;;;3865:106:0;;:::i;7773:333::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;7773:333:0;;;;;;;;:::i;4612:140::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4612:140:0;;;;;;;;:::i;4310:131::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4310:131:0;;;;;;;;;;:::i;5399:244::-;5464:4;-1:-1:-1;;;;;5489:21:0;;;;5481:30;;;;;;5533:10;5524:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5524:29:0;;;;;;;;;;;;:37;;;5577:36;;;;;;;5524:29;;5533:10;5577:36;;;;;;;;;;;-1:-1:-1;5631:4:0;5399:244;;;;:::o;3558:91::-;3629:12;;3558:91;:::o;6116:299::-;-1:-1:-1;;;;;6241:14:0;;6195:4;6241:14;;;:8;:14;;;;;;;;6256:10;6241:26;;;;;;;;:37;;6272:5;6241:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;6212:14:0;;;;;;:8;:14;;;;;;;;6227:10;6212:26;;;;;;;:66;6289:26;6221:4;6305:2;6309:5;6289:9;:26::i;:::-;-1:-1:-1;;;;;6331:54:0;;6358:14;;;;:8;:14;;;;;;;;6346:10;6358:26;;;;;;;;;;;6331:54;;;;;;;6346:10;;6331:54;;;;;;;;;;;;-1:-1:-1;6403:4:0;6116:299;;;;;:::o;6930:323::-;7010:4;-1:-1:-1;;;;;7035:21:0;;;;7027:30;;;;;;7111:10;7102:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7102:29:0;;;;;;;;;;:45;;7136:10;7102:45;:33;:45;:::i;:::-;7079:10;7070:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7070:29:0;;;;;;;;;;;;:77;;;7163:60;;;;;;7070:29;;7163:60;;;;;;;;;;;-1:-1:-1;7241:4:0;6930:323;;;;:::o;3865:106::-;-1:-1:-1;;;;;3947:16:0;3920:7;3947:16;;;;;;;;;;;;3865:106::o;7773:333::-;7858:4;-1:-1:-1;;;;;7883:21:0;;;;7875:30;;;;;;7959:10;7950:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7950:29:0;;;;;;;;;;:50;;7984:15;7950:50;:33;:50;:::i;4612:140::-;4673:4;4690:32;4700:10;4712:2;4716:5;4690:9;:32::i;:::-;-1:-1:-1;4740:4:0;4612:140;;;;:::o;4310:131::-;-1:-1:-1;;;;;4409:15:0;;;4382:7;4409:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;4310:131::o;2005:150::-;2063:7;2091:6;;;;2083:15;;;;;;-1:-1:-1;2121:5:0;;;2005:150::o;8328:262::-;-1:-1:-1;;;;;8416:16:0;;;;8408:25;;;;;;-1:-1:-1;;;;;8464:15:0;;:9;:15;;;;;;;;;;;:26;;8484:5;8464:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;8446:15:0;;;:9;:15;;;;;;;;;;;:44;;;;8517:13;;;;;;;:24;;8535:5;8517:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;8501:13:0;;;:9;:13;;;;;;;;;;;;:40;;;;8557:25;;;;;;;8501:13;;8557:25;;;;;;;;;;;;;8328:262;;;:::o;2241:150::-;2299:7;2331:5;;;2355:6;;;;2347:15;;;;;;2382:1;2241:150;-1:-1:-1;;;2241:150:0:o"}}}}}},"metadata":{"chainids":[4],"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:05:18.000Z","ppackageid":null,"pfunctions":[{"_id":"033f278b-77ce-4e83-9413-0376c993c931","dtypeid":null,"graphid":null,"data":{"name":"Transfer","signature":"0xddf252ad","signatureString":"Transfer(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"039676ca-18f3-4fea-9af6-103f88be8d55","dtypeid":null,"graphid":null,"data":{"name":"transferFrom","signature":"0x23b872dd","signatureString":"transferFrom(address,address,uint256)","gapi":{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"18384036-8319-4a5a-bd1d-6f94c4d0465c","dtypeid":null,"graphid":null,"data":{"name":"balanceOf","signature":"0x70a08231","signatureString":"balanceOf(address)","gapi":{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"246671b7-f9fd-4d0f-a174-c0753378ef29","dtypeid":null,"graphid":null,"data":{"name":"allowance","signature":"0xdd62ed3e","signatureString":"allowance(address,address)","gapi":{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"4274ce1d-f409-4820-abb1-ed3051acd268","dtypeid":null,"graphid":null,"data":{"name":"Approval","signature":"0x8c5be1e5","signatureString":"Approval(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"5a2edc6a-ce10-4f20-9efd-f56173829942","dtypeid":null,"graphid":null,"data":{"name":"transfer","signature":"0xa9059cbb","signatureString":"transfer(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"7dc9f401-19ab-4d20-8c6b-04e880f3846d","dtypeid":null,"graphid":null,"data":{"name":"decreaseAllowance","signature":"0xa457c2d7","signatureString":"decreaseAllowance(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"c678864f-93db-42eb-884b-1589cae96755","dtypeid":null,"graphid":null,"data":{"name":"approve","signature":"0x095ea7b3","signatureString":"approve(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"dc073fbb-8322-449e-9bd4-982c5942e535","dtypeid":null,"graphid":null,"data":{"name":"increaseAllowance","signature":"0x39509351","signatureString":"increaseAllowance(address,uint256)","gapi":{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"},{"_id":"ff2c42b4-848c-4a36-87dc-6a92044828d5","dtypeid":null,"graphid":null,"data":{"name":"totalSupply","signature":"0x18160ddd","signatureString":"totalSupply()","gapi":{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"}],"pclassInstances":[{"_id":"fdb82915-3114-4e57-a23e-ca23c96c3331","id":135,"pclassid_":"4_207943","ppackageid":null,"dtypeid":null,"data":{"compiler":{"name":"solc","version":"v0.5.4+commit.9549d8ff","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"true","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"608060405234801561001057600080fd5b506105dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161007857806370a0823114610166578063a457c2d71461018c578063a9059cbb146101b8578063dd62ed3e146101e4576100a5565b8063095ea7b3146100aa57806318160ddd146100ea57806323b872dd14610104578063395093511461013a575b600080fd5b6100d6600480360360408110156100c057600080fd5b50600160a060020a038135169060200135610212565b604080519115158252519081900360200190f35b6100f2610290565b60408051918252519081900360200190f35b6100d66004803603606081101561011a57600080fd5b50600160a060020a03813581169160208101359091169060400135610296565b6100d66004803603604081101561015057600080fd5b50600160a060020a03813516906020013561035f565b6100f26004803603602081101561017c57600080fd5b5035600160a060020a031661040f565b6100d6600480360360408110156101a257600080fd5b50600160a060020a03813516906020013561042a565b6100d6600480360360408110156101ce57600080fd5b50600160a060020a038135169060200135610475565b6100f2600480360360408110156101fa57600080fd5b50600160a060020a038135811691602001351661048b565b6000600160a060020a038316151561022957600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546102ca908363ffffffff6104b616565b600160a060020a03851660009081526001602090815260408083203384529091529020556102f98484846104cb565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561037657600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff61059816565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561044157600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff6104b616565b60006104823384846104cb565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156104c557600080fd5b50900390565b600160a060020a03821615156104e057600080fd5b600160a060020a038316600090815260208190526040902054610509908263ffffffff6104b616565b600160a060020a03808516600090815260208190526040808220939093559084168152205461053e908263ffffffff61059816565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105aa57600080fd5b939250505056fea165627a7a7230582090e743b30ef56632c80c1261ed15907f60c9057c6accc19304b3f3e5bd2a763a0029","extra":{"sourcemap":"3258:7117:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3258:7117:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5399:244;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5399:244:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3558:91;;;:::i;:::-;;;;;;;;;;;;;;;;6116:299;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6116:299:0;;;;;;;;;;;;;;;;;:::i;6930:323::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6930:323:0;;;;;;;;:::i;3865:106::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3865:106:0;-1:-1:-1;;;;;3865:106:0;;:::i;7773:333::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;7773:333:0;;;;;;;;:::i;4612:140::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4612:140:0;;;;;;;;:::i;4310:131::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4310:131:0;;;;;;;;;;:::i;5399:244::-;5464:4;-1:-1:-1;;;;;5489:21:0;;;;5481:30;;;;;;5533:10;5524:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5524:29:0;;;;;;;;;;;;:37;;;5577:36;;;;;;;5524:29;;5533:10;5577:36;;;;;;;;;;;-1:-1:-1;5631:4:0;5399:244;;;;:::o;3558:91::-;3629:12;;3558:91;:::o;6116:299::-;-1:-1:-1;;;;;6241:14:0;;6195:4;6241:14;;;:8;:14;;;;;;;;6256:10;6241:26;;;;;;;;:37;;6272:5;6241:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;6212:14:0;;;;;;:8;:14;;;;;;;;6227:10;6212:26;;;;;;;:66;6289:26;6221:4;6305:2;6309:5;6289:9;:26::i;:::-;-1:-1:-1;;;;;6331:54:0;;6358:14;;;;:8;:14;;;;;;;;6346:10;6358:26;;;;;;;;;;;6331:54;;;;;;;6346:10;;6331:54;;;;;;;;;;;;-1:-1:-1;6403:4:0;6116:299;;;;;:::o;6930:323::-;7010:4;-1:-1:-1;;;;;7035:21:0;;;;7027:30;;;;;;7111:10;7102:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7102:29:0;;;;;;;;;;:45;;7136:10;7102:45;:33;:45;:::i;:::-;7079:10;7070:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7070:29:0;;;;;;;;;;;;:77;;;7163:60;;;;;;7070:29;;7163:60;;;;;;;;;;;-1:-1:-1;7241:4:0;6930:323;;;;:::o;3865:106::-;-1:-1:-1;;;;;3947:16:0;3920:7;3947:16;;;;;;;;;;;;3865:106::o;7773:333::-;7858:4;-1:-1:-1;;;;;7883:21:0;;;;7875:30;;;;;;7959:10;7950:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;7950:29:0;;;;;;;;;;:50;;7984:15;7950:50;:33;:50;:::i;4612:140::-;4673:4;4690:32;4700:10;4712:2;4716:5;4690:9;:32::i;:::-;-1:-1:-1;4740:4:0;4612:140;;;;:::o;4310:131::-;-1:-1:-1;;;;;4409:15:0;;;4382:7;4409:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;4310:131::o;2005:150::-;2063:7;2091:6;;;;2083:15;;;;;;-1:-1:-1;2121:5:0;;;2005:150::o;8328:262::-;-1:-1:-1;;;;;8416:16:0;;;;8408:25;;;;;;-1:-1:-1;;;;;8464:15:0;;:9;:15;;;;;;;;;;;:26;;8484:5;8464:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;8446:15:0;;;:9;:15;;;;;;;;;;;:44;;;;8517:13;;;;;;;:24;;8535:5;8517:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;8501:13:0;;;:9;:13;;;;;;;;;;;;:40;;;;8557:25;;;;;;;8501:13;;8557:25;;;;;;;;;;;;;8328:262;;;:::o;2241:150::-;2299:7;2331:5;;;2355:6;;;;2347:15;;;;;;2382:1;2241:150;-1:-1:-1;;;2241:150:0:o"}}},"deployment":{"address":"0xe2f790afef300496c636da02cc1ba027c648d8a7","txhash":"0x1d565bdd1e1458b9439f16964fd480de341cb463e2809a78bbb4ceba5ae500e1","block":5895699,"constructorArgs":null,"chainid":4}},"metadata":{"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:05:38.000Z","pclassid":"0021e876-d920-4d36-b1b2-cadac6768910"}]},{"_id":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683","id":"4_383376","dtypeid":null,"data":{"name":"SampleNft","license":"None","gapi":[{"inputs":[{"internalType":"string","name":"sig","type":"string"},{"internalType":"string","name":"checkpoint","type":"string"},{"internalType":"string","name":"baseURI","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getAllTokens","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mintTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"mintTokenBatch","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"mintWithTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"recover","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setBaseTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"sign","type":"string"}],"name":"signature","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"sign","type":"string"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"string","name":"sign","type":"string"}],"name":"transferBatch","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"sign","type":"string"},{"internalType":"bytes32","name":"msgHash","type":"bytes32"},{"internalType":"bytes","name":"hashSig","type":"bytes"}],"name":"transferSign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"checkPoint","type":"string"}],"name":"updateCheckPoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"sign","type":"string"}],"name":"updateSignature","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"sourceByLanguage":{"0":{"sourcesTemp":{"SampleNft":"/**\n *Submitted for verification at Etherscan.io on 2020-02-10\n*/\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, string memory sign) internal;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId, string memory sign) internal;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, string memory sign, bytes memory data) internal;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n\n\n\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    string private _signature;\n    string private _sigCheckPoint;\n\n    constructor (string memory sign, string memory checkPoint) public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _signature = sign;\n        _sigCheckPoint = checkPoint;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][to] = approved;\n        emit ApprovalForAll(_msgSender(), to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     */\n    function transferFrom(address from, address to, uint256 tokenId, string memory sign) internal {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId, sign);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, string memory sign) internal {\n        safeTransferFrom(from, to, tokenId, sign, \"\");\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, string memory sign, bytes memory _data) internal {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransferFrom(from, to, tokenId, sign, _data);\n    }\n\n\n    function transferApproval(address from, address to, uint256 tokenId, string memory sign, bytes32 msgHash, bytes memory hashSig) internal {\n        require(recover(msgHash, hashSig) == ownerOf(tokenId),\"Approval denied\");\n        _safeTransferFrom(from, to, tokenId, sign, \"\");\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransferFrom(address from, address to, uint256 tokenId, string memory sign, bytes memory _data) internal {\n        _transferFrom(from, to, tokenId, sign);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     */\n    function _transferFrom(address from, address to, uint256 tokenId, string memory sign) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        require(bytes(sign).length == bytes(_signature).length, \"Signature length fails\");\n        require(keccak256(abi.encodePacked(sign)) == keccak256(abi.encodePacked(_signature)), \"Signature hash fails\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n\n    function setSignature(string memory newSign) internal {\n        _signature = newSign;\n    }\n\n    // function signature(string memory check) public view returns (string memory) {\n    //     require(bytes(check).length == bytes(_sigCheckPoint).length, \"CheckPoint length fails\");\n    //     require(keccak256(bytes(check)) == keccak256(bytes(_sigCheckPoint)), \"CheckPoint hash fails\");\n    //     return _signature;\n    // }\n\n    function signature(string memory sign) public view returns (string memory) {\n        require(bytes(sign).length == bytes(_sigCheckPoint).length, \"CheckPoint length fails\");\n        require(keccak256(abi.encodePacked(sign)) == keccak256(abi.encodePacked(_sigCheckPoint)), \"CheckPoint hash fails\");\n        return _signature;\n    }\n\n    function setCheckPoint(string memory newCheckPoint) internal {\n        _sigCheckPoint = newCheckPoint;\n    }\n\n\n    /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n    function recover(bytes32 hash, bytes memory sig)\n        public\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (sig.length != 65) {\n        return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        r := mload(add(sig, 0x20))\n        s := mload(add(sig, 0x40))\n        v := byte(0, mload(add(sig, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n        v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n        return (address(0));\n        } else {\n        // solium-disable-next-line arg-overflow\n        return ecrecover(hash, v, r, s);\n        }\n    }\n\n}\n\n\n/**\n * @title Strings\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to a `string`.\n     * via OraclizeAPI - MIT licence\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n     */\n    function fromUint256(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n        return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n        len++;\n        j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n        bstr[k--] = byte(uint8(48 + _i % 10));\n        _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function fromAddress(address addr) internal pure returns(string memory) {\n        bytes20 addrBytes = bytes20(addr);\n        bytes16 hexAlphabet = \"0123456789abcdef\";\n        bytes memory result = new bytes(42);\n        result[0] = '0';\n        result[1] = 'x';\n        for (uint i = 0; i < 20; i++) {\n        result[i * 2 + 2] = hexAlphabet[uint8(addrBytes[i] >> 4)];\n        result[i * 2 + 3] = hexAlphabet[uint8(addrBytes[i] & 0x0f)];\n        }\n        return string(result);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Constructor function.\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721Enumerable via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param sign signature for token transfer\n     */\n    function _transferFrom(address from, address to, uint256 tokenId, string memory sign) internal {\n        super._transferFrom(from, to, tokenId, sign);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        _addTokenToAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use {ERC721-_burn} instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n        _ownedTokensIndex[tokenId] = 0;\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Gets the list of token IDs of the requested owner.\n     * @param owner address owning the tokens\n     * @return uint256[] List of token IDs owned by the requested address\n     */\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n        // lastTokenId, or just over the end of the array if the token was the last one).\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal _tokenURIs;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID.\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\n\n/**\n * @title Full ERC721 Token\n * @dev This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology.\n *\n * See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\n\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\ncontract SampleNft is ERC721, ERC721Full, Ownable{\n    using Strings for string;\n\n    string private _baseTokenURI;\n\n    constructor(string memory sig, string memory checkpoint, string memory baseURI)\n    ERC721Full(\"Terra Test NFT\", \"TestNFT\")\n    ERC721(sig, checkpoint) public {\n        _baseTokenURI = baseURI;\n    }\n\n\n    function baseTokenURI() public view returns (string memory) {\n        return _baseTokenURI;\n    }\n\n\n    function setBaseTokenURI(string memory uri) public onlyOwner {\n        _baseTokenURI = uri;\n    }\n\n\n    /**\n    * @dev Mints a token to an address.\n    * @param _to address of the future owner of the token\n    * @param tokenId id of the minted NFT\n    */\n\n    function mintTo(address _to, uint256 tokenId) public onlyOwner {\n        _mint(_to, tokenId);\n    }\n\n\n/**\n    * @dev Mints a token to an address in batch.\n    * @param _to  address of the future owner of the token\n    * @param ids  ids of the token to be minted\n    */\n\n    function mintTokenBatch(address _to, uint256[] memory ids) public onlyOwner {\n        require(ids.length > 0,\"Ids Array can't be empty\");\n        for (uint256 i = 0; i < ids.length; i++) {\n            _mint(_to, ids[i]);\n            string memory _uri = Strings.strConcat(\n                baseTokenURI(),\n                Strings.uint2str(ids[i]));\n            _setTokenURI(ids[i], _uri);\n        }\n    }\n\n\n    /**\n    * @dev Mints a token to an address with a tokenURI.\n    * @param _to  address of the future owner of the token\n    * @param tokenId id of the minted NFT\n    * @param _uri metadata link to be attached with nft\n    */\n\n    function mintWithTokenURI(address _to, uint256 tokenId, string memory _uri) public onlyOwner {\n        _mint(_to, tokenId);\n        _setTokenURI(tokenId, _uri);\n    }\n\n\n    /**\n     * @dev public function to set the token URI for a given token\n     * Reverts if the token ID does not exist\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyOwner {\n        _setTokenURI(tokenId, uri);\n    }\n\n\n\n    // customizing tokenURI for TV so if have provided independent metadata of any NFT could be returned first\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n        if(bytes(_tokenURIs[_tokenId]).length != 0){\n          return _tokenURIs[_tokenId];\n        }else{\n          return Strings.strConcat(\n            baseTokenURI(),\n            Strings.uint2str(_tokenId)\n            );\n        }\n    }\n\n    function getAllTokens(address _owner) public view returns (uint256[] memory) {\n        return _tokensOfOwner(_owner);\n    }\n\n    function updateSignature(string memory sign) public onlyOwner {\n        setSignature(sign);\n    }\n\n    function updateCheckPoint(string memory checkPoint) public onlyOwner {\n        setCheckPoint(checkPoint);\n    }\n\n\n    function transferSign(address from, address to, uint256 tokenId, string memory sign, bytes32 msgHash, bytes memory hashSig) public onlyOwner{\n        transferApproval(from, to, tokenId, sign, msgHash, hashSig);\n    }\n\n\n    // function transferSignBatch(address from, address to, uint256[] memory tokenIds, string memory sign, bytes32[] memory msgHash, bytes32[] memory hashSig) public onlyOwner{\n    //     require(tokenIds.length > 0, \"Empty Array\");\n    //     require(tokenIds.length == msgHash.length, \"Token and message Hash are not equal\");\n    //     require(msgHash.length == hashSig.length, \"Message hash and signatures are not equal\");\n\n    //     for (uint256 index = 0; index < tokenIds.length; index++) {\n    //         transferApproval(from, to, tokenIds[index], sign, msgHash[index], hashSig[index]);\n    //     }\n    // }\n\n\n    /**\n    * @dev transfer a token to an address in batch.\n    * @param from  address of the current owner of the token\n    * @param to  address of the new owner of the token\n    * @param ids list of ids to be transferred\n    * @param sign signature to transfer\n    */\n\n    function transferBatch(address from, address to, uint256[] memory ids, string memory sign) public onlyOwner{\n        require(ids.length > 0, \"Empty Array\");\n        for (uint256 index = 0; index < ids.length; index++) {\n            safeTransferFrom(from,to,ids[index],sign);\n        }\n    }\n\n    function transfer(address from, address to, uint256 tokenId, string memory sign) public onlyOwner {\n        safeTransferFrom(from, to, tokenId, sign);\n    }\n\n}"},"compiler":{"name":"solc","version":"v0.5.12+commit.7709ece9","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"false","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"60806040523480156200001157600080fd5b5060405162004dd238038062004dd2833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620001d257600080fd5b83820191506020820185811115620001e957600080fd5b82518660018202830111640100000000821117156200020757600080fd5b8083526020830192505050908051906020019080838360005b838110156200023d57808201518184015260208101905062000220565b50505050905090810190601f1680156200026b5780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600e81526020017f54657272612054657374204e46540000000000000000000000000000000000008152506040518060400160405280600781526020017f546573744e46540000000000000000000000000000000000000000000000000081525081818686620002fa6301ffc9a760e01b6200049b60201b60201c565b620003126380ac58cd60e01b6200049b60201b60201c565b81600590805190602001906200032a929190620005ac565b50806006908051906020019062000343929190620005ac565b5050506200035e63780e9d6360e01b6200049b60201b60201c565b81600b908051906020019062000376929190620005ac565b5080600c90805190602001906200038f929190620005ac565b50620003a8635b5e139f60e01b6200049b60201b60201c565b50505050620003bc620005a460201b60201c565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600f908051906020019062000491929190620005ac565b505050506200065b565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005ef57805160ff191683800117855562000620565b8280016001018555821562000620579182015b828111156200061f57825182559160200191906001019062000602565b5b5090506200062f919062000633565b5090565b6200065891905b80821115620006545760008160009055506001016200063a565b5090565b90565b614767806200066b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a389559f116100a2578063d57b282611610071578063d57b282614611102578063e985e9c514611207578063ef67b61c14611283578063f2fde38b14611412576101e5565b8063a389559f14610de9578063b0e353bd14610ea4578063c87b56dd14610fd8578063d547cfb71461107f576101e5565b80638fafc75c116100de5780638fafc75c14610a98578063959d02dd14610b7057806395d89b4114610d16578063a22cb46514610d99576101e5565b806370a08231146109ca578063715018a614610a225780638da5cb5b14610a2c5780638f32d59b14610a76576101e5565b806319045a2511610187578063449a52f811610156578063449a52f8146107e75780634f6ccce71461083557806350bb4e7f146108775780636352211e1461095c576101e5565b806319045a251461050a5780632f745c591461060f57806330176e131461067157806337ac916a1461072c576101e5565b8063095ea7b3116101c3578063095ea7b314610340578063162094c41461038e578063178b6de61461045357806318160ddd146104ec576101e5565b806301ffc9a7146101ea57806306fdde031461024f578063081812fc146102d2575b600080fd5b6102356004803603602081101561020057600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611456565b604051808215151515815260200191505060405180910390f35b6102576114bd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029757808201518184015260208101905061027c565b50505050905090810190601f1680156102c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fe600480360360208110156102e857600080fd5b810190808035906020019092919050505061155f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61038c6004803603604081101561035657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115fa565b005b610451600480360360408110156103a457600080fd5b8101908080359060200190929190803590602001906401000000008111156103cb57600080fd5b8201836020820111156103dd57600080fd5b803590602001918460018302840111640100000000831117156103ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506117e1565b005b6104956004803603602081101561046957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611869565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d85780820151818401526020810190506104bd565b505050509050019250505060405180910390f35b6104f46118ca565b6040518082815260200191505060405180910390f35b6105cd6004803603604081101561052057600080fd5b81019080803590602001909291908035906020019064010000000081111561054757600080fd5b82018360208201111561055957600080fd5b8035906020019184600183028401116401000000008311171561057b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506118d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61065b6004803603604081101561062557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119b9565b6040518082815260200191505060405180910390f35b61072a6004803603602081101561068757600080fd5b81019080803590602001906401000000008111156106a457600080fd5b8201836020820111156106b657600080fd5b803590602001918460018302840111640100000000831117156106d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611a78565b005b6107e56004803603602081101561074257600080fd5b810190808035906020019064010000000081111561075f57600080fd5b82018360208201111561077157600080fd5b8035906020019184600183028401116401000000008311171561079357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b0c565b005b610833600480360360408110156107fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b92565b005b6108616004803603602081101561084b57600080fd5b8101908080359060200190929190505050611c1a565b6040518082815260200191505060405180910390f35b61095a6004803603606081101561088d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156108d457600080fd5b8201836020820111156108e657600080fd5b8035906020019184600183028401116401000000008311171561090857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c9a565b005b6109886004803603602081101561097257600080fd5b8101908080359060200190929190505050611d2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a0c600480360360208110156109e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df5565b6040518082815260200191505060405180910390f35b610a2a611eca565b005b610a34612005565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a7e61202f565b604051808215151515815260200191505060405180910390f35b610b6e60048036036040811015610aae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610aeb57600080fd5b820183602082011115610afd57600080fd5b80359060200191846020830284011164010000000083111715610b1f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061208e565b005b610d14600480360360c0811015610b8657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610bed57600080fd5b820183602082011115610bff57600080fd5b80359060200191846001830284011164010000000083111715610c2157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115610c8e57600080fd5b820183602082011115610ca057600080fd5b80359060200191846001830284011164010000000083111715610cc257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061220b565b005b610d1e61229b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d5e578082015181840152602081019050610d43565b50505050905090810190601f168015610d8b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610de760048036036040811015610daf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061233d565b005b610ea260048036036020811015610dff57600080fd5b8101908080359060200190640100000000811115610e1c57600080fd5b820183602082011115610e2e57600080fd5b80359060200191846001830284011164010000000083111715610e5057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506124f5565b005b610f5d60048036036020811015610eba57600080fd5b8101908080359060200190640100000000811115610ed757600080fd5b820183602082011115610ee957600080fd5b80359060200191846001830284011164010000000083111715610f0b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061257b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f9d578082015181840152602081019050610f82565b50505050905090810190601f168015610fca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61100460048036036020811015610fee57600080fd5b810190808035906020019092919050505061280b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611044578082015181840152602081019050611029565b50505050905090810190601f1680156110715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b611087612910565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156110c75780820151818401526020810190506110ac565b50505050905090810190601f1680156110f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6112056004803603608081101561111857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561117f57600080fd5b82018360208201111561119157600080fd5b803590602001918460018302840111640100000000831117156111b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506129b2565b005b6112696004803603604081101561121d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a3e565b604051808215151515815260200191505060405180910390f35b6114106004803603608081101561129957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156112f657600080fd5b82018360208201111561130857600080fd5b8035906020019184602083028401116401000000008311171561132a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561138a57600080fd5b82018360208201111561139c57600080fd5b803590602001918460018302840111640100000000831117156113be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612ad2565b005b6114546004803603602081101561142857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c05565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6060600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115555780601f1061152a57610100808354040283529160200191611555565b820191906000526020600020905b81548152906001019060200180831161153857829003601f168201915b5050505050905090565b600061156a82612c8b565b6115bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614634602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061160582611d2d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561168c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806146b56021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166116ab612cfd565b73ffffffffffffffffffffffffffffffffffffffff1614806116da57506116d9816116d4612cfd565b612a3e565b5b61172f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806145a96038913960400191505060405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6117e961202f565b61185b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6118658282612d05565b5050565b606061187482612d8f565b8054806020026020016040519081016040528092919081815260200182805480156118be57602002820191906000526020600020905b8154815260200190600101908083116118aa575b50505050509050919050565b6000600980549050905090565b60008060008060418551146118f257600093505050506119b3565b6020850151925060408501519150606085015160001a9050601b8160ff16101561191d57601b810190505b601b8160ff16141580156119355750601c8160ff1614155b1561194657600093505050506119b3565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156119a3573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60006119c483611df5565b8210611a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806144d6602b913960400191505060405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611a6557fe5b9060005260206000200154905092915050565b611a8061202f565b611af2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600f9080519060200190611b08929190614404565b5050565b611b1461202f565b611b86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611b8f81612dd7565b50565b611b9a61202f565b611c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611c168282612df1565b5050565b6000611c246118ca565b8210611c7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614707602c913960400191505060405180910390fd5b60098281548110611c8857fe5b90600052602060002001549050919050565b611ca261202f565b611d14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611d1e8383612df1565b611d288282612d05565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611dec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061460b6029913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806145e1602a913960400191505060405180910390fd5b611ec3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e12565b9050919050565b611ed261202f565b611f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612072612cfd565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b61209661202f565b612108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081511161217f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4964732041727261792063616e277420626520656d707479000000000000000081525060200191505060405180910390fd5b60008090505b8151811015612206576121ab8383838151811061219e57fe5b6020026020010151612df1565b60606121d96121b8612910565b6121d48585815181106121c757fe5b6020026020010151612e20565b612f4d565b90506121f88383815181106121ea57fe5b602002602001015182612d05565b508080600101915050612185565b505050565b61221361202f565b612285576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612293868686868686612f91565b505050505050565b6060600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123335780601f1061230857610100808354040283529160200191612333565b820191906000526020600020905b81548152906001019060200180831161231657829003601f168201915b5050505050905090565b612345612cfd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b80600460006123f3612cfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166124a0612cfd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6124fd61202f565b61256f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61257881613067565b50565b60606006805460018160011615610100020316600290049050825114612609576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f436865636b506f696e74206c656e677468206661696c7300000000000000000081525060200191505060405180910390fd5b600660405160200180828054600181600116156101000203166002900480156126695780601f10612647576101008083540402835291820191612669565b820191906000526020600020905b815481529060010190602001808311612655575b505091505060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106126bb5780518252602082019150602081019050602083039250612698565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014612769576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436865636b506f696e742068617368206661696c73000000000000000000000081525060200191505060405180910390fd5b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127ff5780601f106127d4576101008083540402835291602001916127ff565b820191906000526020600020905b8154815290600101906020018083116127e257829003601f168201915b50505050509050919050565b60606000600d6000848152602001908152602001600020805460018160011615610100020316600290049050146128ef57600d60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128e35780601f106128b8576101008083540402835291602001916128e3565b820191906000526020600020905b8154815290600101906020018083116128c657829003601f168201915b5050505050905061290b565b6129086128fa612910565b61290384612e20565b612f4d565b90505b919050565b6060600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129a85780601f1061297d576101008083540402835291602001916129a8565b820191906000526020600020905b81548152906001019060200180831161298b57829003601f168201915b5050505050905090565b6129ba61202f565b612a2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612a3884848484613081565b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612ada61202f565b612b4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000825111612bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f456d70747920417272617900000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008090505b8251811015612bfe57612bf18585858481518110612be357fe5b602002602001015185613081565b8080600101915050612bc9565b5050505050565b612c0d61202f565b612c7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612c88816130a3565b50565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b612d0e82612c8b565b612d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614660602c913960400191505060405180910390fd5b80600d60008481526020019081526020016000209080519060200190612d8a929190614404565b505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050919050565b8060069080519060200190612ded929190614404565b5050565b612dfb82826131e9565b612e058282613401565b612e0e816134c8565b5050565b600081600001549050919050565b60606000821415612e68576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f48565b600082905060005b60008214612e92578080600101915050600a8281612e8a57fe5b049150612e70565b6060816040519080825280601f01601f191660200182016040528015612ec75781602001600182028038833980820191505090505b50905060006001830390505b60008614612f4057600a8681612ee557fe5b0660300160f81b82828060019003935081518110612eff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681612f3857fe5b049550612ed3565b819450505050505b919050565b6060612f898383604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250613514565b905092915050565b612f9a84611d2d565b73ffffffffffffffffffffffffffffffffffffffff16612fba83836118d7565b73ffffffffffffffffffffffffffffffffffffffff1614613043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f417070726f76616c2064656e696564000000000000000000000000000000000081525060200191505060405180910390fd5b61305f86868686604051806020016040528060008152506137da565b505050505050565b806005908051906020019061307d929190614404565b5050565b61309d848484846040518060200160405280600081525061384e565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806145336026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561328c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b61329581612c8b565b15613308576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506133a1600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206138c8565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506008600083815260200190815260200160002081905550600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156135705781602001600182028038833980820191505090505b5090506060819050600080905060008090505b88518110156135f15788818151811061359857fe5b602001015160f81c60f81b8383806001019450815181106135b557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613583565b5060008090505b87518110156136665787818151811061360d57fe5b602001015160f81c60f81b83838060010194508151811061362a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506135f8565b5060008090505b86518110156136db5786818151811061368257fe5b602001015160f81c60f81b83838060010194508151811061369f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061366d565b5060008090505b8551811015613750578581815181106136f757fe5b602001015160f81c60f81b83838060010194508151811061371457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506136e2565b5060008090505b84518110156137c55784818151811061376c57fe5b602001015160f81c60f81b83838060010194508151811061378957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613757565b50819850505050505050505095945050505050565b6137e6858585856138de565b6137f285858584613904565b613847576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806145016032913960400191505060405180910390fd5b5050505050565b61385f613859612cfd565b84613af4565b6138b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806146d66031913960400191505060405180910390fd5b6138c185858585856137da565b5050505050565b6001816000016000828254019250508190555050565b6138ea84848484613be8565b6138f48483614030565b6138fe8383613401565b50505050565b60006139258473ffffffffffffffffffffffffffffffffffffffff166141ce565b6139325760019050613aec565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02613958612cfd565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a145780820151818401526020810190506139f9565b50505050905090810190601f168015613a415780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613a6357600080fd5b505af1158015613a77573d6000803e3d6000fd5b505050506040513d6020811015613a8d57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b6000613aff82612c8b565b613b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061457d602c913960400191505060405180910390fd5b6000613b5f83611d2d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480613bce57508373ffffffffffffffffffffffffffffffffffffffff16613bb68461155f565b73ffffffffffffffffffffffffffffffffffffffff16145b80613bdf5750613bde8185612a3e565b5b91505092915050565b8373ffffffffffffffffffffffffffffffffffffffff16613c0883611d2d565b73ffffffffffffffffffffffffffffffffffffffff1614613c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061468c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613cfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145596024913960400191505060405180910390fd5b6005805460018160011615610100020316600290049050815114613d86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5369676e6174757265206c656e677468206661696c730000000000000000000081525060200191505060405180910390fd5b60056040516020018082805460018160011615610100020316600290048015613de65780601f10613dc4576101008083540402835291820191613de6565b820191906000526020600020905b815481529060010190602001808311613dd2575b505091505060405160208183030381529060405280519060200120816040516020018082805190602001908083835b60208310613e385780518252602082019150602081019050602083039250613e15565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014613ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5369676e61747572652068617368206661696c7300000000000000000000000081525060200191505060405180910390fd5b613eef82614219565b613f36600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206142d7565b613f7d600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206138c8565b826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60006140886001600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506142fa90919063ffffffff16565b9050600060086000848152602001908152602001600020549050818114614175576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106140f557fe5b9060005260206000200154905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061414d57fe5b9060005260206000200181905550816008600083815260200190815260200160002081905550505b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036141c79190614484565b5050505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156142105750808214155b92505050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146142d45760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6142ef600182600001546142fa90919063ffffffff16565b816000018190555050565b600061433c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614344565b905092915050565b60008383111582906143f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143b657808201518184015260208101905061439b565b50505050905090810190601f1680156143e35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061444557805160ff1916838001178555614473565b82800160010185558215614473579182015b82811115614472578251825591602001919060010190614457565b5b50905061448091906144b0565b5090565b8154818355818111156144ab578183600052602060002091820191016144aa91906144b0565b5b505050565b6144d291905b808211156144ce5760008160009055506001016144b6565b5090565b9056fe455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473a265627a7a723158204ddcee9f4c9e82081731800ff2aebec413e83693a122eca0a80e212403c4521564736f6c634300050ca636865636b706f696e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014687474703a2f2f6c6f63616c686f73742e696f2f000000000000000000000000","extra":{"sourcemap":"53721:4624:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;53721:4624:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15898:135;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15898:135:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;49108:85;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;49108:85:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20939:204;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20939:204:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20221:425;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20221:425:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;55799:119;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55799:119:0;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;55799:119:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;55799:119:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;55799:119:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;55799:119:0;;;;;;;;;;;;;;;:::i;:::-;;56377:125;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56377:125:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;56377:125:0;;;;;;;;;;;;;;;;;40854:96;;;:::i;:::-;;;;;;;;;;;;;;;;;;;33971:1087;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33971:1087:0;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;33971:1087:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;33971:1087:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;33971:1087:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;33971:1087:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;40463:232;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40463:232:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;54169:99;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54169:99:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;54169:99:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;54169:99:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;54169:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;54169:99:0;;;;;;;;;;;;;;;:::i;:::-;;56617:113;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56617:113:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56617:113:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56617:113:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56617:113:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56617:113:0;;;;;;;;;;;;;;;:::i;:::-;;54440:101;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54440:101:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;41296:199;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41296:199:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;55383:169;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55383:169:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;55383:169:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;55383:169:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;55383:169:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;55383:169:0;;;;;;;;;;;;;;;:::i;:::-;;19562:228;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19562:228:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;19125:211;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19125:211:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;52971:140;;;:::i;:::-;;52160:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;52526:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;54725:412;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54725:412:0;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;54725:412:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;54725:412:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;54725:412:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;54725:412:0;;;;;;;;;;;;;;;:::i;:::-;;56740:218;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56740:218:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56740:218:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56740:218:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56740:218:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56740:218:0;;;;;;;;;;;;;;;:::i;:::-;;49308:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;49308:89:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21444:254;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21444:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;56510:99;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56510:99:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56510:99:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56510:99:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56510:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56510:99:0;;;;;;;;;;;;;;;:::i;:::-;;33229:333;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33229:333:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;33229:333:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;33229:333:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;33229:333:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;33229:333:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;33229:333:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56044:325;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56044:325:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;56044:325:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54060:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;54060:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58182:158;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;58182:158:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;58182:158:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;58182:158:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;58182:158:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;58182:158:0;;;;;;;;;;;;;;;:::i;:::-;;22028:147;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22028:147:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;57879:295;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;57879:295:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;57879:295:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;57879:295:0;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;57879:295:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;57879:295:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;57879:295:0;;;;;;;;;;;;;;;:::i;:::-;;53266:109;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;53266:109:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;15898:135;15968:4;15992:20;:33;16013:11;15992:33;;;;;;;;;;;;;;;;;;;;;;;;;;;15985:40;;15898:135;;;:::o;49108:85::-;49147:13;49180:5;49173:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49108:85;:::o;20939:204::-;20998:7;21026:16;21034:7;21026;:16::i;:::-;21018:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21111:15;:24;21127:7;21111:24;;;;;;;;;;;;;;;;;;;;;21104:31;;20939:204;;;:::o;20221:425::-;20285:13;20301:16;20309:7;20301;:16::i;:::-;20285:32;;20342:5;20336:11;;:2;:11;;;;20328:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20422:5;20406:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;20431:37;20448:5;20455:12;:10;:12::i;:::-;20431:16;:37::i;:::-;20406:62;20398:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20592:2;20565:15;:24;20581:7;20565:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;20630:7;20626:2;20610:28;;20619:5;20610:28;;;;;;;;;;;;20221:425;;;:::o;55799:119::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55884:26;55897:7;55906:3;55884:12;:26::i;:::-;55799:119;;:::o;56377:125::-;56436:16;56472:22;56487:6;56472:14;:22::i;:::-;56465:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56377:125;;;:::o;40854:96::-;40898:7;40925:10;:17;;;;40918:24;;40854:96;:::o;33971:1087::-;34068:7;34093:9;34113;34133:7;34210:2;34196:3;:10;:16;34192:64;;34241:1;34225:19;;;;;;;34192:64;34555:4;34550:3;34546:14;34540:21;34535:26;;34591:4;34586:3;34582:14;34576:21;34571:26;;34635:4;34630:3;34626:14;34620:21;34617:1;34612:30;34607:35;;34765:2;34761:1;:6;;;34757:42;;;34785:2;34780:7;;;;34757:42;34884:2;34879:1;:7;;;;:18;;;;;34895:2;34890:1;:7;;;;34879:18;34875:176;;;34926:1;34910:19;;;;;;;34875:176;35015:24;35025:4;35031:1;35034;35037;35015:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;35015:24:0;;;;;;;;35008:31;;;;;33971:1087;;;;;:::o;40463:232::-;40543:7;40579:16;40589:5;40579:9;:16::i;:::-;40571:5;:24;40563:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40661:12;:19;40674:5;40661:19;;;;;;;;;;;;;;;40681:5;40661:26;;;;;;;;;;;;;;;;40654:33;;40463:232;;;;:::o;54169:99::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54257:3;54241:13;:19;;;;;;;;;;;;:::i;:::-;;54169:99;:::o;56617:113::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56697:25;56711:10;56697:13;:25::i;:::-;56617:113;:::o;54440:101::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54514:19;54520:3;54525:7;54514:5;:19::i;:::-;54440:101;;:::o;41296:199::-;41354:7;41390:13;:11;:13::i;:::-;41382:5;:21;41374:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41470:10;41481:5;41470:17;;;;;;;;;;;;;;;;41463:24;;41296:199;;;:::o;55383:169::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55487:19;55493:3;55498:7;55487:5;:19::i;:::-;55517:27;55530:7;55539:4;55517:12;:27::i;:::-;55383:169;;;:::o;19562:228::-;19617:7;19637:13;19653:11;:20;19665:7;19653:20;;;;;;;;;;;;;;;;;;;;;19637:36;;19709:1;19692:19;;:5;:19;;;;19684:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19777:5;19770:12;;;19562:228;;;:::o;19125:211::-;19180:7;19225:1;19208:19;;:5;:19;;;;19200:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19294:34;:17;:24;19312:5;19294:24;;;;;;;;;;;;;;;:32;:34::i;:::-;19287:41;;19125:211;;;:::o;52971:140::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53070:1;53033:40;;53054:6;;;;;;;;;;;53033:40;;;;;;;;;;;;53101:1;53084:6;;:19;;;;;;;;;;;;;;;;;;52971:140::o;52160:79::-;52198:7;52225:6;;;;;;;;;;;52218:13;;52160:79;:::o;52526:94::-;52566:4;52606:6;;;;;;;;;;;52590:22;;:12;:10;:12::i;:::-;:22;;;52583:29;;52526:94;:::o;54725:412::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54833:1;54820:3;:10;:14;54812:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54878:9;54890:1;54878:13;;54873:257;54897:3;:10;54893:1;:14;54873:257;;;54929:18;54935:3;54940;54944:1;54940:6;;;;;;;;;;;;;;54929:5;:18::i;:::-;54962;54983:94;55019:14;:12;:14::i;:::-;55052:24;55069:3;55073:1;55069:6;;;;;;;;;;;;;;55052:16;:24::i;:::-;54983:17;:94::i;:::-;54962:115;;55092:26;55105:3;55109:1;55105:6;;;;;;;;;;;;;;55113:4;55092:12;:26::i;:::-;54873:257;54909:3;;;;;;;54873:257;;;;54725:412;;:::o;56740:218::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56891:59;56908:4;56914:2;56918:7;56927:4;56933:7;56942;56891:16;:59::i;:::-;56740:218;;;;;;:::o;49308:89::-;49349:13;49382:7;49375:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49308:89;:::o;21444:254::-;21530:12;:10;:12::i;:::-;21524:18;;:2;:18;;;;21516:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21624:8;21585:18;:32;21604:12;:10;:12::i;:::-;21585:32;;;;;;;;;;;;;;;:36;21618:2;21585:36;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;21677:2;21648:42;;21663:12;:10;:12::i;:::-;21648:42;;;21681:8;21648:42;;;;;;;;;;;;;;;;;;;;;;21444:254;;:::o;56510:99::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56583:18;56596:4;56583:12;:18::i;:::-;56510:99;:::o;33229:333::-;33289:13;33351:14;33345:28;;;;;;;;;;;;;;;;33329:4;33323:18;:50;33315:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33484:14;33467:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;33467:32:0;;;33457:43;;;;;;33447:4;33430:22;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;33430:22:0;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;33430:22:0;;;33420:33;;;;;;:80;33412:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33544:10;33537:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33229:333;;;:::o;56044:325::-;56103:13;56170:1;56138:10;:20;56149:8;56138:20;;;;;;;;;;;56132:34;;;;;;;;;;;;;;;;:39;56129:233;;56192:10;:20;56203:8;56192:20;;;;;;;;;;;56185:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56129:233;56248:102;56280:14;:12;:14::i;:::-;56309:26;56326:8;56309:16;:26::i;:::-;56248:17;:102::i;:::-;56241:109;;56044:325;;;;:::o;54060:99::-;54105:13;54138;54131:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54060:99;:::o;58182:158::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58291:41;58308:4;58314:2;58318:7;58327:4;58291:16;:41::i;:::-;58182:158;;;;:::o;22028:147::-;22108:4;22132:18;:25;22151:5;22132:25;;;;;;;;;;;;;;;:35;22158:8;22132:35;;;;;;;;;;;;;;;;;;;;;;;;;22125:42;;22028:147;;;;:::o;57879:295::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58018:1;58005:3;:10;:14;57997:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58051:13;58067:1;58051:17;;58046:121;58078:3;:10;58070:5;:18;58046:121;;;58114:41;58131:4;58136:2;58139:3;58143:5;58139:10;;;;;;;;;;;;;;58150:4;58114:16;:41::i;:::-;58090:7;;;;;;;58046:121;;;;57879:295;;;;:::o;53266:109::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53339:28;53358:8;53339:18;:28::i;:::-;53266:109;:::o;26517:155::-;26574:4;26591:13;26607:11;:20;26619:7;26607:20;;;;;;;;;;;;;;;;;;;;;26591:36;;26662:1;26645:19;;:5;:19;;;;26638:26;;;26517:155;;;:::o;806:98::-;851:15;886:10;879:17;;806:98;:::o;50056:195::-;50142:16;50150:7;50142;:16::i;:::-;50134:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50240:3;50218:10;:19;50229:7;50218:19;;;;;;;;;;;:25;;;;;;;;;;;;:::i;:::-;;50056:195;;:::o;43534:126::-;43596:17;43633:12;:19;43646:5;43633:19;;;;;;;;;;;;;;;43626:26;;43534:126;;;:::o;33570:110::-;33659:13;33642:14;:30;;;;;;;;;;;;:::i;:::-;;33570:110;:::o;42464:202::-;42528:24;42540:2;42544:7;42528:11;:24::i;:::-;42565:40;42593:2;42597:7;42565:27;:40::i;:::-;42618;42650:7;42618:31;:40::i;:::-;42464:202;;:::o;14659:114::-;14724:7;14751;:14;;;14744:21;;14659:114;;;:::o;37366:462::-;37416:27;37466:1;37460:2;:7;37456:46;;;37480:10;;;;;;;;;;;;;;;;;;;;;37456:46;37512:6;37521:2;37512:11;;37534:8;37553:61;37565:1;37560;:6;37553:61;;37579:5;;;;;;;37600:2;37595:7;;;;;;;;;37553:61;;;37624:17;37654:3;37644:14;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;37644:14:0;;;;37624:34;;37669:6;37684:1;37678:3;:7;37669:16;;37696:95;37709:1;37703:2;:7;37696:95;;37756:2;37751;:7;;;;;;37746:2;:12;37735:25;;37723:4;37728:3;;;;;;;37723:9;;;;;;;;;;;:37;;;;;;;;;;;37777:2;37771:8;;;;;;;;;37696:95;;;37815:4;37801:19;;;;;;37366:462;;;;:::o;37210:148::-;37288:13;37321:29;37331:2;37335;37321:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:9;:29::i;:::-;37314:36;;37210:148;;;;:::o;24962:285::-;25147:16;25155:7;25147;:16::i;:::-;25118:45;;:25;25126:7;25135;25118;:25::i;:::-;:45;;;25110:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25193:46;25211:4;25217:2;25221:7;25230:4;25193:46;;;;;;;;;;;;:17;:46::i;:::-;24962:285;;;;;;:::o;32791:93::-;32869:7;32856:10;:20;;;;;;;;;;;;:::i;:::-;;32791:93;:::o;23702:162::-;23811:45;23828:4;23834:2;23838:7;23847:4;23811:45;;;;;;;;;;;;:16;:45::i;:::-;23702:162;;;;:::o;53481:229::-;53575:1;53555:22;;:8;:22;;;;53547:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53665:8;53636:38;;53657:6;;;;;;;;;;;53636:38;;;;;;;;;;;;53694:8;53685:6;;:17;;;;;;;;;;;;;;;;;;53481:229;:::o;29127:335::-;29213:1;29199:16;;:2;:16;;;;29191:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29272:16;29280:7;29272;:16::i;:::-;29271:17;29263:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29357:2;29334:11;:20;29346:7;29334:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;29370:33;:17;:21;29388:2;29370:21;;;;;;;;;;;;;;;:31;:33::i;:::-;29446:7;29442:2;29421:33;;29438:1;29421:33;;;;;;;;;;;;29127:335;;:::o;43961:186::-;44075:12;:16;44088:2;44075:16;;;;;;;;;;;;;;;:23;;;;44046:17;:26;44064:7;44046:26;;;;;;;;;;;:52;;;;44109:12;:16;44122:2;44109:16;;;;;;;;;;;;;;;44131:7;44109:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;44109:30:0;;;;;;;;;;;;;;;;;;;;;;43961:186;;:::o;44348:164::-;44452:10;:17;;;;44425:15;:24;44441:7;44425:24;;;;;;;;;;;:44;;;;44480:10;44496:7;44480:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;44480:24:0;;;;;;;;;;;;;;;;;;;;;;44348:164;:::o;35936:900::-;36068:13;36094:16;36119:2;36094:28;;36133:16;36158:2;36133:28;;36172:16;36197:2;36172:28;;36211:16;36236:2;36211:28;;36250:16;36275:2;36250:28;;36289:19;36374:3;:10;36361:3;:10;36348:3;:10;36335:3;:10;36322:3;:10;:23;:36;:49;:62;36311:74;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;36311:74:0;;;;36289:96;;36396:19;36424:5;36396:34;;36441:6;36450:1;36441:10;;36467:6;36476:1;36467:10;;36462:58;36483:3;:10;36479:1;:14;36462:58;;;36514:3;36518:1;36514:6;;;;;;;;;;;;;;;;36500;36507:3;;;;;;36500:11;;;;;;;;;;;:20;;;;;;;;;;;36495:3;;;;;;;36462:58;;;;36536:6;36545:1;36536:10;;36531:58;36552:3;:10;36548:1;:14;36531:58;;;36583:3;36587:1;36583:6;;;;;;;;;;;;;;;;36569;36576:3;;;;;;36569:11;;;;;;;;;;;:20;;;;;;;;;;;36564:3;;;;;;;36531:58;;;;36605:6;36614:1;36605:10;;36600:58;36621:3;:10;36617:1;:14;36600:58;;;36652:3;36656:1;36652:6;;;;;;;;;;;;;;;;36638;36645:3;;;;;;36638:11;;;;;;;;;;;:20;;;;;;;;;;;36633:3;;;;;;;36600:58;;;;36674:6;36683:1;36674:10;;36669:58;36690:3;:10;36686:1;:14;36669:58;;;36721:3;36725:1;36721:6;;;;;;;;;;;;;;;;36707;36714:3;;;;;;36707:11;;;;;;;;;;;:20;;;;;;;;;;;36702:3;;;;;;;36669:58;;;;36743:6;36752:1;36743:10;;36738:58;36759:3;:10;36755:1;:14;36738:58;;;36790:3;36794:1;36790:6;;;;;;;;;;;;;;;;36776;36783:3;;;;;;36776:11;;;;;;;;;;;:20;;;;;;;;;;;36771:3;;;;;;;36738:58;;;;36821:6;36807:21;;;;;;;;;;35936:900;;;;;;;:::o;26017:298::-;26147:38;26161:4;26167:2;26171:7;26180:4;26147:13;:38::i;:::-;26204:48;26227:4;26233:2;26237:7;26246:5;26204:22;:48::i;:::-;26196:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26017:298;;;;;:::o;24652:300::-;24789:41;24808:12;:10;:12::i;:::-;24822:7;24789:18;:41::i;:::-;24781:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24895:49;24913:4;24919:2;24923:7;24932:4;24938:5;24895:17;:49::i;:::-;24652:300;;;;;:::o;14781:91::-;14863:1;14845:7;:14;;;:19;;;;;;;;;;;14781:91;:::o;41928:271::-;42034:44;42054:4;42060:2;42064:7;42073:4;42034:19;:44::i;:::-;42091:47;42124:4;42130:7;42091:32;:47::i;:::-;42151:40;42179:2;42183:7;42151:27;:40::i;:::-;41928:271;;;;:::o;32082:358::-;32204:4;32231:15;:2;:13;;;:15::i;:::-;32226:60;;32270:4;32263:11;;;;32226:60;32298:13;32330:2;32314:36;;;32351:12;:10;:12::i;:::-;32365:4;32371:7;32380:5;32314:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;32314:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32314:72:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32314:72:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32314:72:0;;;;;;;;;;;;;;;;32298:88;;17148:10;32415:16;;32405:26;;;:6;:26;;;;32397:35;;;32082:358;;;;;;;:::o;27042:333::-;27127:4;27152:16;27160:7;27152;:16::i;:::-;27144:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27228:13;27244:16;27252:7;27244;:16::i;:::-;27228:32;;27290:5;27279:16;;:7;:16;;;:51;;;;27323:7;27299:31;;:20;27311:7;27299:11;:20::i;:::-;:31;;;27279:51;:87;;;;27334:32;27351:5;27358:7;27334:16;:32::i;:::-;27279:87;27271:96;;;27042:333;;;;:::o;30787:693::-;30921:4;30901:24;;:16;30909:7;30901;:16::i;:::-;:24;;;30893:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31004:1;30990:16;;:2;:16;;;;30982:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31096:10;31090:24;;;;;;;;;;;;;;;;31074:4;31068:18;:46;31060:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31224:10;31207:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;31207:28:0;;;31197:39;;;;;;31187:4;31170:22;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;31170:22:0;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;31170:22:0;;;31160:33;;;;;;:76;31152:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31274:23;31289:7;31274:14;:23::i;:::-;31310:35;:17;:23;31328:4;31310:23;;;;;;;;;;;;;;;:33;:35::i;:::-;31356:33;:17;:21;31374:2;31356:21;;;;;;;;;;;;;;;:31;:33::i;:::-;31425:2;31402:11;:20;31414:7;31402:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;31464:7;31460:2;31445:27;;31454:4;31445:27;;;;;;;;;;;;30787:693;;;;:::o;45139:1148::-;45405:22;45430:32;45460:1;45430:12;:18;45443:4;45430:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;45405:57;;45473:18;45494:17;:26;45512:7;45494:26;;;;;;;;;;;;45473:47;;45641:14;45627:10;:28;45623:328;;45672:19;45694:12;:18;45707:4;45694:18;;;;;;;;;;;;;;;45713:14;45694:34;;;;;;;;;;;;;;;;45672:56;;45778:11;45745:12;:18;45758:4;45745:18;;;;;;;;;;;;;;;45764:10;45745:30;;;;;;;;;;;;;;;:44;;;;45895:10;45862:17;:30;45880:11;45862:30;;;;;;;;;;;:43;;;;45623:328;;46040:12;:18;46053:4;46040:18;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:::i;:::-;;45139:1148;;;;:::o;11113:810::-;11173:4;11626:16;11653:19;11675:66;11653:88;;;;11844:7;11832:20;11820:32;;11884:3;11872:15;;:8;:15;;:42;;;;;11903:11;11891:8;:23;;11872:42;11864:51;;;;11113:810;;;:::o;32608:175::-;32708:1;32672:38;;:15;:24;32688:7;32672:24;;;;;;;;;;;;;;;;;;;;;:38;;;32668:108;;32762:1;32727:15;:24;32743:7;32727:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;32668:108;32608:175;:::o;14880:110::-;14961:21;14980:1;14961:7;:14;;;:18;;:21;;;;:::i;:::-;14944:7;:14;;:38;;;;14880:110;:::o;3186:136::-;3244:7;3271:43;3275:1;3278;3271:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;3264:50;;3186:136;;;;:::o;3659:192::-;3745:7;3778:1;3773;:6;;3781:12;3765:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3765:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3805:9;3821:1;3817;:5;3805:17;;3842:1;3835:8;;;3659:192;;;;;:::o;53721:4624::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}}}}}},"metadata":{"chainids":[4],"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:05:18.000Z","ppackageid":null,"pfunctions":[{"_id":"00658b41-5a6f-45ac-a597-f8da772b19e0","dtypeid":null,"graphid":null,"data":{"name":"isApprovedForAll","signature":"0xe985e9c5","signatureString":"isApprovedForAll(address,address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"046d9418-7d5d-449b-83bb-2801e728703f","dtypeid":null,"graphid":null,"data":{"name":"setBaseTokenURI","signature":"0x30176e13","signatureString":"setBaseTokenURI(string)","gapi":{"constant":false,"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setBaseTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"0643bd51-f333-4819-9e7a-86526bcfd5c0","dtypeid":null,"graphid":null,"data":{"name":"Approval","signature":"0x8c5be1e5","signatureString":"Approval(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"0cd4d5c6-022c-4731-b6da-3488bce0cf45","dtypeid":null,"graphid":null,"data":{"name":"OwnershipTransferred","signature":"0x8be0079c","signatureString":"OwnershipTransferred(address,address)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"108f9113-2794-4ba6-a701-1909c1ec0d12","dtypeid":null,"graphid":null,"data":{"name":"ownerOf","signature":"0x6352211e","signatureString":"ownerOf(uint256)","gapi":{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"11383d03-2438-4c9f-8f96-16159cae3984","dtypeid":null,"graphid":null,"data":{"name":"renounceOwnership","signature":"0x715018a6","signatureString":"renounceOwnership()","gapi":{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"12721257-8097-4cd3-aa0e-994986fd49c7","dtypeid":null,"graphid":null,"data":{"name":"totalSupply","signature":"0x18160ddd","signatureString":"totalSupply()","gapi":{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"1a1bf37d-384b-4b68-a127-a5e40607793f","dtypeid":null,"graphid":null,"data":{"name":"tokenByIndex","signature":"0x4f6ccce7","signatureString":"tokenByIndex(uint256)","gapi":{"constant":true,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"2961c949-9709-47f0-b97e-7d041db6724f","dtypeid":null,"graphid":null,"data":{"name":"getAllTokens","signature":"0x178b6de6","signatureString":"getAllTokens(address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getAllTokens","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"2f9c5ae9-8ec8-43e3-bbd3-6f1ee66a2a6c","dtypeid":null,"graphid":null,"data":{"name":"updateSignature","signature":"0xa389559f","signatureString":"updateSignature(string)","gapi":{"constant":false,"inputs":[{"internalType":"string","name":"sign","type":"string"}],"name":"updateSignature","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"2ffe88b5-7d3a-48cc-84b2-61788e29ed5c","dtypeid":null,"graphid":null,"data":{"signature":"0x3bb665c9","signatureString":"(string,string,string)","gapi":{"inputs":[{"internalType":"string","name":"sig","type":"string"},{"internalType":"string","name":"checkpoint","type":"string"},{"internalType":"string","name":"baseURI","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"30f9d484-c467-40f9-9927-9c843c1da600","dtypeid":null,"graphid":null,"data":{"name":"transferSign","signature":"0x959d02dd","signatureString":"transferSign(address,address,uint256,string,bytes32,bytes)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"sign","type":"string"},{"internalType":"bytes32","name":"msgHash","type":"bytes32"},{"internalType":"bytes","name":"hashSig","type":"bytes"}],"name":"transferSign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"30ff83a2-96da-40d6-b066-df6fc408c905","dtypeid":null,"graphid":null,"data":{"name":"symbol","signature":"0x95d89b41","signatureString":"symbol()","gapi":{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"3ccf62ee-103a-447c-bd0c-d6dc4239a87f","dtypeid":null,"graphid":null,"data":{"name":"supportsInterface","signature":"0x01ffc9a7","signatureString":"supportsInterface(bytes4)","gapi":{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"3e3bdc75-f666-403c-92b5-749851090558","dtypeid":null,"graphid":null,"data":{"name":"balanceOf","signature":"0x70a08231","signatureString":"balanceOf(address)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"411f5064-5df8-4b20-9d86-ce91e777a710","dtypeid":null,"graphid":null,"data":{"name":"setTokenURI","signature":"0x162094c4","signatureString":"setTokenURI(uint256,string)","gapi":{"constant":false,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"5a8ebec1-8cb0-44c9-9ef0-2910b8b19b41","dtypeid":null,"graphid":null,"data":{"name":"isOwner","signature":"0x8f32d59b","signatureString":"isOwner()","gapi":{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"5fa7dd66-583f-4994-b330-abf6f896d9c4","dtypeid":null,"graphid":null,"data":{"name":"getApproved","signature":"0x081812fc","signatureString":"getApproved(uint256)","gapi":{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"66f5cc7f-e355-4b4b-8d10-2b5ecb7cbfe3","dtypeid":null,"graphid":null,"data":{"name":"approve","signature":"0x095ea7b3","signatureString":"approve(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"6c9b82cf-6f75-49cf-9c1c-e2c95e4a148a","dtypeid":null,"graphid":null,"data":{"name":"name","signature":"0x06fdde03","signatureString":"name()","gapi":{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"82f51948-2d64-4bec-a6a1-52c5c1b56992","dtypeid":null,"graphid":null,"data":{"name":"tokenOfOwnerByIndex","signature":"0x2f745c59","signatureString":"tokenOfOwnerByIndex(address,uint256)","gapi":{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"857c41ab-1fa1-4a2a-aee7-46a5d1d97fba","dtypeid":null,"graphid":null,"data":{"name":"transferOwnership","signature":"0xf2fde38b","signatureString":"transferOwnership(address)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"8b18b177-119f-4a02-93c8-d21dd0e224e9","dtypeid":null,"graphid":null,"data":{"name":"setApprovalForAll","signature":"0xa22cb465","signatureString":"setApprovalForAll(address,bool)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"9867c7e0-de00-4377-b7cc-71ce37d95c46","dtypeid":null,"graphid":null,"data":{"name":"updateCheckPoint","signature":"0x37ac916a","signatureString":"updateCheckPoint(string)","gapi":{"constant":false,"inputs":[{"internalType":"string","name":"checkPoint","type":"string"}],"name":"updateCheckPoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"989715cf-c13e-4e76-bdb1-be7c1fa3453b","dtypeid":null,"graphid":null,"data":{"name":"mintTo","signature":"0x449a52f8","signatureString":"mintTo(address,uint256)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mintTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"a761b6f2-1ec4-42f5-acab-fb1d86e5bce5","dtypeid":null,"graphid":null,"data":{"name":"transferBatch","signature":"0xef67b61c","signatureString":"transferBatch(address,address,uint256[],string)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"string","name":"sign","type":"string"}],"name":"transferBatch","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"a8c00cc7-f612-426e-afff-939770a09860","dtypeid":null,"graphid":null,"data":{"name":"recover","signature":"0x19045a25","signatureString":"recover(bytes32,bytes)","gapi":{"constant":true,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"recover","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"ab81b531-23a7-454e-a604-aaad6c8df4c2","dtypeid":null,"graphid":null,"data":{"name":"tokenURI","signature":"0xc87b56dd","signatureString":"tokenURI(uint256)","gapi":{"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"ac11ac2e-6349-412a-aecf-04612138dff8","dtypeid":null,"graphid":null,"data":{"name":"baseTokenURI","signature":"0xd547cfb7","signatureString":"baseTokenURI()","gapi":{"constant":true,"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"b1204fc9-2416-4c15-8418-abd66ea4a98b","dtypeid":null,"graphid":null,"data":{"name":"owner","signature":"0x8da5cb5b","signatureString":"owner()","gapi":{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"bca43afe-f217-42b9-8afd-aa9686905203","dtypeid":null,"graphid":null,"data":{"name":"Transfer","signature":"0xddf252ad","signatureString":"Transfer(address,address,uint256)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"c744697a-657c-4c83-9c4b-73f5522675a1","dtypeid":null,"graphid":null,"data":{"name":"signature","signature":"0xb0e353bd","signatureString":"signature(string)","gapi":{"constant":true,"inputs":[{"internalType":"string","name":"sign","type":"string"}],"name":"signature","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"c80b6518-8ae1-48b1-a6db-b868afc7b9c7","dtypeid":null,"graphid":null,"data":{"name":"ApprovalForAll","signature":"0x17307eab","signatureString":"ApprovalForAll(address,address,bool)","gapi":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"d40e5646-11c1-42a5-bdfd-ddf5c4aab1e7","dtypeid":null,"graphid":null,"data":{"name":"mintTokenBatch","signature":"0x8fafc75c","signatureString":"mintTokenBatch(address,uint256[])","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"mintTokenBatch","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"e2543863-39d4-4ba9-a7c7-1241124f84ef","dtypeid":null,"graphid":null,"data":{"name":"mintWithTokenURI","signature":"0x50bb4e7f","signatureString":"mintWithTokenURI(address,uint256,string)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"mintWithTokenURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"},{"_id":"ea197799-1ae7-4a4d-84f9-4468c3d8fff5","dtypeid":null,"graphid":null,"data":{"name":"transfer","signature":"0xd57b2826","signatureString":"transfer(address,address,uint256,string)","gapi":{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"sign","type":"string"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}},"metadata":{"chainids":[4],"categories":["solidity"]},"timestamp":"2020-02-22T10:05:18.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"}],"pclassInstances":[{"_id":"d258bbea-16e6-4f1e-b02f-58a9ebb74281","id":721,"pclassid_":"4_383376","ppackageid":null,"dtypeid":null,"data":{"compiler":{"name":"solc","version":"v0.5.12+commit.7709ece9","settings":{"evmVersion":"default evmVersion","libraries":null,"optimizer":{"enabled":"false","runs":200}}},"compilerOutput":{"runtime":{"bytecode":"60806040523480156200001157600080fd5b5060405162004dd238038062004dd2833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620001d257600080fd5b83820191506020820185811115620001e957600080fd5b82518660018202830111640100000000821117156200020757600080fd5b8083526020830192505050908051906020019080838360005b838110156200023d57808201518184015260208101905062000220565b50505050905090810190601f1680156200026b5780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600e81526020017f54657272612054657374204e46540000000000000000000000000000000000008152506040518060400160405280600781526020017f546573744e46540000000000000000000000000000000000000000000000000081525081818686620002fa6301ffc9a760e01b6200049b60201b60201c565b620003126380ac58cd60e01b6200049b60201b60201c565b81600590805190602001906200032a929190620005ac565b50806006908051906020019062000343929190620005ac565b5050506200035e63780e9d6360e01b6200049b60201b60201c565b81600b908051906020019062000376929190620005ac565b5080600c90805190602001906200038f929190620005ac565b50620003a8635b5e139f60e01b6200049b60201b60201c565b50505050620003bc620005a460201b60201c565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600f908051906020019062000491929190620005ac565b505050506200065b565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005ef57805160ff191683800117855562000620565b8280016001018555821562000620579182015b828111156200061f57825182559160200191906001019062000602565b5b5090506200062f919062000633565b5090565b6200065891905b80821115620006545760008160009055506001016200063a565b5090565b90565b614767806200066b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a389559f116100a2578063d57b282611610071578063d57b282614611102578063e985e9c514611207578063ef67b61c14611283578063f2fde38b14611412576101e5565b8063a389559f14610de9578063b0e353bd14610ea4578063c87b56dd14610fd8578063d547cfb71461107f576101e5565b80638fafc75c116100de5780638fafc75c14610a98578063959d02dd14610b7057806395d89b4114610d16578063a22cb46514610d99576101e5565b806370a08231146109ca578063715018a614610a225780638da5cb5b14610a2c5780638f32d59b14610a76576101e5565b806319045a2511610187578063449a52f811610156578063449a52f8146107e75780634f6ccce71461083557806350bb4e7f146108775780636352211e1461095c576101e5565b806319045a251461050a5780632f745c591461060f57806330176e131461067157806337ac916a1461072c576101e5565b8063095ea7b3116101c3578063095ea7b314610340578063162094c41461038e578063178b6de61461045357806318160ddd146104ec576101e5565b806301ffc9a7146101ea57806306fdde031461024f578063081812fc146102d2575b600080fd5b6102356004803603602081101561020057600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611456565b604051808215151515815260200191505060405180910390f35b6102576114bd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029757808201518184015260208101905061027c565b50505050905090810190601f1680156102c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fe600480360360208110156102e857600080fd5b810190808035906020019092919050505061155f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61038c6004803603604081101561035657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115fa565b005b610451600480360360408110156103a457600080fd5b8101908080359060200190929190803590602001906401000000008111156103cb57600080fd5b8201836020820111156103dd57600080fd5b803590602001918460018302840111640100000000831117156103ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506117e1565b005b6104956004803603602081101561046957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611869565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d85780820151818401526020810190506104bd565b505050509050019250505060405180910390f35b6104f46118ca565b6040518082815260200191505060405180910390f35b6105cd6004803603604081101561052057600080fd5b81019080803590602001909291908035906020019064010000000081111561054757600080fd5b82018360208201111561055957600080fd5b8035906020019184600183028401116401000000008311171561057b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506118d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61065b6004803603604081101561062557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119b9565b6040518082815260200191505060405180910390f35b61072a6004803603602081101561068757600080fd5b81019080803590602001906401000000008111156106a457600080fd5b8201836020820111156106b657600080fd5b803590602001918460018302840111640100000000831117156106d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611a78565b005b6107e56004803603602081101561074257600080fd5b810190808035906020019064010000000081111561075f57600080fd5b82018360208201111561077157600080fd5b8035906020019184600183028401116401000000008311171561079357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b0c565b005b610833600480360360408110156107fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b92565b005b6108616004803603602081101561084b57600080fd5b8101908080359060200190929190505050611c1a565b6040518082815260200191505060405180910390f35b61095a6004803603606081101561088d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156108d457600080fd5b8201836020820111156108e657600080fd5b8035906020019184600183028401116401000000008311171561090857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c9a565b005b6109886004803603602081101561097257600080fd5b8101908080359060200190929190505050611d2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a0c600480360360208110156109e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df5565b6040518082815260200191505060405180910390f35b610a2a611eca565b005b610a34612005565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a7e61202f565b604051808215151515815260200191505060405180910390f35b610b6e60048036036040811015610aae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610aeb57600080fd5b820183602082011115610afd57600080fd5b80359060200191846020830284011164010000000083111715610b1f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061208e565b005b610d14600480360360c0811015610b8657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610bed57600080fd5b820183602082011115610bff57600080fd5b80359060200191846001830284011164010000000083111715610c2157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115610c8e57600080fd5b820183602082011115610ca057600080fd5b80359060200191846001830284011164010000000083111715610cc257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061220b565b005b610d1e61229b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d5e578082015181840152602081019050610d43565b50505050905090810190601f168015610d8b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610de760048036036040811015610daf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061233d565b005b610ea260048036036020811015610dff57600080fd5b8101908080359060200190640100000000811115610e1c57600080fd5b820183602082011115610e2e57600080fd5b80359060200191846001830284011164010000000083111715610e5057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506124f5565b005b610f5d60048036036020811015610eba57600080fd5b8101908080359060200190640100000000811115610ed757600080fd5b820183602082011115610ee957600080fd5b80359060200191846001830284011164010000000083111715610f0b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061257b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f9d578082015181840152602081019050610f82565b50505050905090810190601f168015610fca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61100460048036036020811015610fee57600080fd5b810190808035906020019092919050505061280b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611044578082015181840152602081019050611029565b50505050905090810190601f1680156110715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b611087612910565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156110c75780820151818401526020810190506110ac565b50505050905090810190601f1680156110f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6112056004803603608081101561111857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561117f57600080fd5b82018360208201111561119157600080fd5b803590602001918460018302840111640100000000831117156111b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506129b2565b005b6112696004803603604081101561121d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a3e565b604051808215151515815260200191505060405180910390f35b6114106004803603608081101561129957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156112f657600080fd5b82018360208201111561130857600080fd5b8035906020019184602083028401116401000000008311171561132a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561138a57600080fd5b82018360208201111561139c57600080fd5b803590602001918460018302840111640100000000831117156113be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612ad2565b005b6114546004803603602081101561142857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c05565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6060600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115555780601f1061152a57610100808354040283529160200191611555565b820191906000526020600020905b81548152906001019060200180831161153857829003601f168201915b5050505050905090565b600061156a82612c8b565b6115bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614634602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061160582611d2d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561168c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806146b56021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166116ab612cfd565b73ffffffffffffffffffffffffffffffffffffffff1614806116da57506116d9816116d4612cfd565b612a3e565b5b61172f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806145a96038913960400191505060405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6117e961202f565b61185b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6118658282612d05565b5050565b606061187482612d8f565b8054806020026020016040519081016040528092919081815260200182805480156118be57602002820191906000526020600020905b8154815260200190600101908083116118aa575b50505050509050919050565b6000600980549050905090565b60008060008060418551146118f257600093505050506119b3565b6020850151925060408501519150606085015160001a9050601b8160ff16101561191d57601b810190505b601b8160ff16141580156119355750601c8160ff1614155b1561194657600093505050506119b3565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156119a3573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60006119c483611df5565b8210611a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806144d6602b913960400191505060405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611a6557fe5b9060005260206000200154905092915050565b611a8061202f565b611af2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600f9080519060200190611b08929190614404565b5050565b611b1461202f565b611b86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611b8f81612dd7565b50565b611b9a61202f565b611c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611c168282612df1565b5050565b6000611c246118ca565b8210611c7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614707602c913960400191505060405180910390fd5b60098281548110611c8857fe5b90600052602060002001549050919050565b611ca261202f565b611d14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611d1e8383612df1565b611d288282612d05565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611dec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061460b6029913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806145e1602a913960400191505060405180910390fd5b611ec3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e12565b9050919050565b611ed261202f565b611f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612072612cfd565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b61209661202f565b612108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081511161217f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4964732041727261792063616e277420626520656d707479000000000000000081525060200191505060405180910390fd5b60008090505b8151811015612206576121ab8383838151811061219e57fe5b6020026020010151612df1565b60606121d96121b8612910565b6121d48585815181106121c757fe5b6020026020010151612e20565b612f4d565b90506121f88383815181106121ea57fe5b602002602001015182612d05565b508080600101915050612185565b505050565b61221361202f565b612285576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612293868686868686612f91565b505050505050565b6060600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123335780601f1061230857610100808354040283529160200191612333565b820191906000526020600020905b81548152906001019060200180831161231657829003601f168201915b5050505050905090565b612345612cfd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b80600460006123f3612cfd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166124a0612cfd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6124fd61202f565b61256f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61257881613067565b50565b60606006805460018160011615610100020316600290049050825114612609576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f436865636b506f696e74206c656e677468206661696c7300000000000000000081525060200191505060405180910390fd5b600660405160200180828054600181600116156101000203166002900480156126695780601f10612647576101008083540402835291820191612669565b820191906000526020600020905b815481529060010190602001808311612655575b505091505060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106126bb5780518252602082019150602081019050602083039250612698565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014612769576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436865636b506f696e742068617368206661696c73000000000000000000000081525060200191505060405180910390fd5b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127ff5780601f106127d4576101008083540402835291602001916127ff565b820191906000526020600020905b8154815290600101906020018083116127e257829003601f168201915b50505050509050919050565b60606000600d6000848152602001908152602001600020805460018160011615610100020316600290049050146128ef57600d60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128e35780601f106128b8576101008083540402835291602001916128e3565b820191906000526020600020905b8154815290600101906020018083116128c657829003601f168201915b5050505050905061290b565b6129086128fa612910565b61290384612e20565b612f4d565b90505b919050565b6060600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129a85780601f1061297d576101008083540402835291602001916129a8565b820191906000526020600020905b81548152906001019060200180831161298b57829003601f168201915b5050505050905090565b6129ba61202f565b612a2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612a3884848484613081565b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612ada61202f565b612b4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000825111612bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f456d70747920417272617900000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008090505b8251811015612bfe57612bf18585858481518110612be357fe5b602002602001015185613081565b8080600101915050612bc9565b5050505050565b612c0d61202f565b612c7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612c88816130a3565b50565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b612d0e82612c8b565b612d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180614660602c913960400191505060405180910390fd5b80600d60008481526020019081526020016000209080519060200190612d8a929190614404565b505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050919050565b8060069080519060200190612ded929190614404565b5050565b612dfb82826131e9565b612e058282613401565b612e0e816134c8565b5050565b600081600001549050919050565b60606000821415612e68576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f48565b600082905060005b60008214612e92578080600101915050600a8281612e8a57fe5b049150612e70565b6060816040519080825280601f01601f191660200182016040528015612ec75781602001600182028038833980820191505090505b50905060006001830390505b60008614612f4057600a8681612ee557fe5b0660300160f81b82828060019003935081518110612eff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681612f3857fe5b049550612ed3565b819450505050505b919050565b6060612f898383604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250613514565b905092915050565b612f9a84611d2d565b73ffffffffffffffffffffffffffffffffffffffff16612fba83836118d7565b73ffffffffffffffffffffffffffffffffffffffff1614613043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f417070726f76616c2064656e696564000000000000000000000000000000000081525060200191505060405180910390fd5b61305f86868686604051806020016040528060008152506137da565b505050505050565b806005908051906020019061307d929190614404565b5050565b61309d848484846040518060200160405280600081525061384e565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806145336026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561328c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b61329581612c8b565b15613308576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506133a1600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206138c8565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506008600083815260200190815260200160002081905550600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156135705781602001600182028038833980820191505090505b5090506060819050600080905060008090505b88518110156135f15788818151811061359857fe5b602001015160f81c60f81b8383806001019450815181106135b557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613583565b5060008090505b87518110156136665787818151811061360d57fe5b602001015160f81c60f81b83838060010194508151811061362a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506135f8565b5060008090505b86518110156136db5786818151811061368257fe5b602001015160f81c60f81b83838060010194508151811061369f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061366d565b5060008090505b8551811015613750578581815181106136f757fe5b602001015160f81c60f81b83838060010194508151811061371457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506136e2565b5060008090505b84518110156137c55784818151811061376c57fe5b602001015160f81c60f81b83838060010194508151811061378957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613757565b50819850505050505050505095945050505050565b6137e6858585856138de565b6137f285858584613904565b613847576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806145016032913960400191505060405180910390fd5b5050505050565b61385f613859612cfd565b84613af4565b6138b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806146d66031913960400191505060405180910390fd5b6138c185858585856137da565b5050505050565b6001816000016000828254019250508190555050565b6138ea84848484613be8565b6138f48483614030565b6138fe8383613401565b50505050565b60006139258473ffffffffffffffffffffffffffffffffffffffff166141ce565b6139325760019050613aec565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02613958612cfd565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a145780820151818401526020810190506139f9565b50505050905090810190601f168015613a415780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613a6357600080fd5b505af1158015613a77573d6000803e3d6000fd5b505050506040513d6020811015613a8d57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b6000613aff82612c8b565b613b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061457d602c913960400191505060405180910390fd5b6000613b5f83611d2d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480613bce57508373ffffffffffffffffffffffffffffffffffffffff16613bb68461155f565b73ffffffffffffffffffffffffffffffffffffffff16145b80613bdf5750613bde8185612a3e565b5b91505092915050565b8373ffffffffffffffffffffffffffffffffffffffff16613c0883611d2d565b73ffffffffffffffffffffffffffffffffffffffff1614613c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061468c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613cfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145596024913960400191505060405180910390fd5b6005805460018160011615610100020316600290049050815114613d86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5369676e6174757265206c656e677468206661696c730000000000000000000081525060200191505060405180910390fd5b60056040516020018082805460018160011615610100020316600290048015613de65780601f10613dc4576101008083540402835291820191613de6565b820191906000526020600020905b815481529060010190602001808311613dd2575b505091505060405160208183030381529060405280519060200120816040516020018082805190602001908083835b60208310613e385780518252602082019150602081019050602083039250613e15565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014613ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5369676e61747572652068617368206661696c7300000000000000000000000081525060200191505060405180910390fd5b613eef82614219565b613f36600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206142d7565b613f7d600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206138c8565b826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60006140886001600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506142fa90919063ffffffff16565b9050600060086000848152602001908152602001600020549050818114614175576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106140f557fe5b9060005260206000200154905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061414d57fe5b9060005260206000200181905550816008600083815260200190815260200160002081905550505b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036141c79190614484565b5050505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156142105750808214155b92505050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146142d45760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6142ef600182600001546142fa90919063ffffffff16565b816000018190555050565b600061433c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614344565b905092915050565b60008383111582906143f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143b657808201518184015260208101905061439b565b50505050905090810190601f1680156143e35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061444557805160ff1916838001178555614473565b82800160010185558215614473579182015b82811115614472578251825591602001919060010190614457565b5b50905061448091906144b0565b5090565b8154818355818111156144ab578183600052602060002091820191016144aa91906144b0565b5b505050565b6144d291905b808211156144ce5760008160009055506001016144b6565b5090565b9056fe455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473a265627a7a723158204ddcee9f4c9e82081731800ff2aebec413e83693a122eca0a80e212403c4521564736f6c634300050ca636865636b706f696e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014687474703a2f2f6c6f63616c686f73742e696f2f000000000000000000000000","extra":{"sourcemap":"53721:4624:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;53721:4624:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15898:135;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15898:135:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;49108:85;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;49108:85:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20939:204;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20939:204:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20221:425;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20221:425:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;55799:119;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55799:119:0;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;55799:119:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;55799:119:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;55799:119:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;55799:119:0;;;;;;;;;;;;;;;:::i;:::-;;56377:125;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56377:125:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;56377:125:0;;;;;;;;;;;;;;;;;40854:96;;;:::i;:::-;;;;;;;;;;;;;;;;;;;33971:1087;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33971:1087:0;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;33971:1087:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;33971:1087:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;33971:1087:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;33971:1087:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;40463:232;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40463:232:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;54169:99;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54169:99:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;54169:99:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;54169:99:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;54169:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;54169:99:0;;;;;;;;;;;;;;;:::i;:::-;;56617:113;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56617:113:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56617:113:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56617:113:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56617:113:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56617:113:0;;;;;;;;;;;;;;;:::i;:::-;;54440:101;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54440:101:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;41296:199;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41296:199:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;55383:169;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55383:169:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;55383:169:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;55383:169:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;55383:169:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;55383:169:0;;;;;;;;;;;;;;;:::i;:::-;;19562:228;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19562:228:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;19125:211;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19125:211:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;52971:140;;;:::i;:::-;;52160:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;52526:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;54725:412;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54725:412:0;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;54725:412:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;54725:412:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;54725:412:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;54725:412:0;;;;;;;;;;;;;;;:::i;:::-;;56740:218;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56740:218:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56740:218:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56740:218:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56740:218:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56740:218:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56740:218:0;;;;;;;;;;;;;;;:::i;:::-;;49308:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;49308:89:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21444:254;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21444:254:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;56510:99;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56510:99:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;56510:99:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;56510:99:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;56510:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;56510:99:0;;;;;;;;;;;;;;;:::i;:::-;;33229:333;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33229:333:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;33229:333:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;33229:333:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;33229:333:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;33229:333:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;33229:333:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56044:325;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56044:325:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;56044:325:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54060:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;54060:99:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58182:158;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;58182:158:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;58182:158:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;58182:158:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;58182:158:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;58182:158:0;;;;;;;;;;;;;;;:::i;:::-;;22028:147;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22028:147:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;57879:295;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;57879:295:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;57879:295:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;57879:295:0;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;57879:295:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;57879:295:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;57879:295:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;57879:295:0;;;;;;;;;;;;;;;:::i;:::-;;53266:109;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;53266:109:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;15898:135;15968:4;15992:20;:33;16013:11;15992:33;;;;;;;;;;;;;;;;;;;;;;;;;;;15985:40;;15898:135;;;:::o;49108:85::-;49147:13;49180:5;49173:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49108:85;:::o;20939:204::-;20998:7;21026:16;21034:7;21026;:16::i;:::-;21018:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21111:15;:24;21127:7;21111:24;;;;;;;;;;;;;;;;;;;;;21104:31;;20939:204;;;:::o;20221:425::-;20285:13;20301:16;20309:7;20301;:16::i;:::-;20285:32;;20342:5;20336:11;;:2;:11;;;;20328:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20422:5;20406:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;20431:37;20448:5;20455:12;:10;:12::i;:::-;20431:16;:37::i;:::-;20406:62;20398:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20592:2;20565:15;:24;20581:7;20565:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;20630:7;20626:2;20610:28;;20619:5;20610:28;;;;;;;;;;;;20221:425;;;:::o;55799:119::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55884:26;55897:7;55906:3;55884:12;:26::i;:::-;55799:119;;:::o;56377:125::-;56436:16;56472:22;56487:6;56472:14;:22::i;:::-;56465:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56377:125;;;:::o;40854:96::-;40898:7;40925:10;:17;;;;40918:24;;40854:96;:::o;33971:1087::-;34068:7;34093:9;34113;34133:7;34210:2;34196:3;:10;:16;34192:64;;34241:1;34225:19;;;;;;;34192:64;34555:4;34550:3;34546:14;34540:21;34535:26;;34591:4;34586:3;34582:14;34576:21;34571:26;;34635:4;34630:3;34626:14;34620:21;34617:1;34612:30;34607:35;;34765:2;34761:1;:6;;;34757:42;;;34785:2;34780:7;;;;34757:42;34884:2;34879:1;:7;;;;:18;;;;;34895:2;34890:1;:7;;;;34879:18;34875:176;;;34926:1;34910:19;;;;;;;34875:176;35015:24;35025:4;35031:1;35034;35037;35015:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;35015:24:0;;;;;;;;35008:31;;;;;33971:1087;;;;;:::o;40463:232::-;40543:7;40579:16;40589:5;40579:9;:16::i;:::-;40571:5;:24;40563:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40661:12;:19;40674:5;40661:19;;;;;;;;;;;;;;;40681:5;40661:26;;;;;;;;;;;;;;;;40654:33;;40463:232;;;;:::o;54169:99::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54257:3;54241:13;:19;;;;;;;;;;;;:::i;:::-;;54169:99;:::o;56617:113::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56697:25;56711:10;56697:13;:25::i;:::-;56617:113;:::o;54440:101::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54514:19;54520:3;54525:7;54514:5;:19::i;:::-;54440:101;;:::o;41296:199::-;41354:7;41390:13;:11;:13::i;:::-;41382:5;:21;41374:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41470:10;41481:5;41470:17;;;;;;;;;;;;;;;;41463:24;;41296:199;;;:::o;55383:169::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55487:19;55493:3;55498:7;55487:5;:19::i;:::-;55517:27;55530:7;55539:4;55517:12;:27::i;:::-;55383:169;;;:::o;19562:228::-;19617:7;19637:13;19653:11;:20;19665:7;19653:20;;;;;;;;;;;;;;;;;;;;;19637:36;;19709:1;19692:19;;:5;:19;;;;19684:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19777:5;19770:12;;;19562:228;;;:::o;19125:211::-;19180:7;19225:1;19208:19;;:5;:19;;;;19200:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19294:34;:17;:24;19312:5;19294:24;;;;;;;;;;;;;;;:32;:34::i;:::-;19287:41;;19125:211;;;:::o;52971:140::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53070:1;53033:40;;53054:6;;;;;;;;;;;53033:40;;;;;;;;;;;;53101:1;53084:6;;:19;;;;;;;;;;;;;;;;;;52971:140::o;52160:79::-;52198:7;52225:6;;;;;;;;;;;52218:13;;52160:79;:::o;52526:94::-;52566:4;52606:6;;;;;;;;;;;52590:22;;:12;:10;:12::i;:::-;:22;;;52583:29;;52526:94;:::o;54725:412::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54833:1;54820:3;:10;:14;54812:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54878:9;54890:1;54878:13;;54873:257;54897:3;:10;54893:1;:14;54873:257;;;54929:18;54935:3;54940;54944:1;54940:6;;;;;;;;;;;;;;54929:5;:18::i;:::-;54962;54983:94;55019:14;:12;:14::i;:::-;55052:24;55069:3;55073:1;55069:6;;;;;;;;;;;;;;55052:16;:24::i;:::-;54983:17;:94::i;:::-;54962:115;;55092:26;55105:3;55109:1;55105:6;;;;;;;;;;;;;;55113:4;55092:12;:26::i;:::-;54873:257;54909:3;;;;;;;54873:257;;;;54725:412;;:::o;56740:218::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56891:59;56908:4;56914:2;56918:7;56927:4;56933:7;56942;56891:16;:59::i;:::-;56740:218;;;;;;:::o;49308:89::-;49349:13;49382:7;49375:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49308:89;:::o;21444:254::-;21530:12;:10;:12::i;:::-;21524:18;;:2;:18;;;;21516:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21624:8;21585:18;:32;21604:12;:10;:12::i;:::-;21585:32;;;;;;;;;;;;;;;:36;21618:2;21585:36;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;21677:2;21648:42;;21663:12;:10;:12::i;:::-;21648:42;;;21681:8;21648:42;;;;;;;;;;;;;;;;;;;;;;21444:254;;:::o;56510:99::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56583:18;56596:4;56583:12;:18::i;:::-;56510:99;:::o;33229:333::-;33289:13;33351:14;33345:28;;;;;;;;;;;;;;;;33329:4;33323:18;:50;33315:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33484:14;33467:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;33467:32:0;;;33457:43;;;;;;33447:4;33430:22;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;33430:22:0;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;33430:22:0;;;33420:33;;;;;;:80;33412:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33544:10;33537:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33229:333;;;:::o;56044:325::-;56103:13;56170:1;56138:10;:20;56149:8;56138:20;;;;;;;;;;;56132:34;;;;;;;;;;;;;;;;:39;56129:233;;56192:10;:20;56203:8;56192:20;;;;;;;;;;;56185:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56129:233;56248:102;56280:14;:12;:14::i;:::-;56309:26;56326:8;56309:16;:26::i;:::-;56248:17;:102::i;:::-;56241:109;;56044:325;;;;:::o;54060:99::-;54105:13;54138;54131:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54060:99;:::o;58182:158::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58291:41;58308:4;58314:2;58318:7;58327:4;58291:16;:41::i;:::-;58182:158;;;;:::o;22028:147::-;22108:4;22132:18;:25;22151:5;22132:25;;;;;;;;;;;;;;;:35;22158:8;22132:35;;;;;;;;;;;;;;;;;;;;;;;;;22125:42;;22028:147;;;;:::o;57879:295::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58018:1;58005:3;:10;:14;57997:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58051:13;58067:1;58051:17;;58046:121;58078:3;:10;58070:5;:18;58046:121;;;58114:41;58131:4;58136:2;58139:3;58143:5;58139:10;;;;;;;;;;;;;;58150:4;58114:16;:41::i;:::-;58090:7;;;;;;;58046:121;;;;57879:295;;;;:::o;53266:109::-;52372:9;:7;:9::i;:::-;52364:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53339:28;53358:8;53339:18;:28::i;:::-;53266:109;:::o;26517:155::-;26574:4;26591:13;26607:11;:20;26619:7;26607:20;;;;;;;;;;;;;;;;;;;;;26591:36;;26662:1;26645:19;;:5;:19;;;;26638:26;;;26517:155;;;:::o;806:98::-;851:15;886:10;879:17;;806:98;:::o;50056:195::-;50142:16;50150:7;50142;:16::i;:::-;50134:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50240:3;50218:10;:19;50229:7;50218:19;;;;;;;;;;;:25;;;;;;;;;;;;:::i;:::-;;50056:195;;:::o;43534:126::-;43596:17;43633:12;:19;43646:5;43633:19;;;;;;;;;;;;;;;43626:26;;43534:126;;;:::o;33570:110::-;33659:13;33642:14;:30;;;;;;;;;;;;:::i;:::-;;33570:110;:::o;42464:202::-;42528:24;42540:2;42544:7;42528:11;:24::i;:::-;42565:40;42593:2;42597:7;42565:27;:40::i;:::-;42618;42650:7;42618:31;:40::i;:::-;42464:202;;:::o;14659:114::-;14724:7;14751;:14;;;14744:21;;14659:114;;;:::o;37366:462::-;37416:27;37466:1;37460:2;:7;37456:46;;;37480:10;;;;;;;;;;;;;;;;;;;;;37456:46;37512:6;37521:2;37512:11;;37534:8;37553:61;37565:1;37560;:6;37553:61;;37579:5;;;;;;;37600:2;37595:7;;;;;;;;;37553:61;;;37624:17;37654:3;37644:14;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;37644:14:0;;;;37624:34;;37669:6;37684:1;37678:3;:7;37669:16;;37696:95;37709:1;37703:2;:7;37696:95;;37756:2;37751;:7;;;;;;37746:2;:12;37735:25;;37723:4;37728:3;;;;;;;37723:9;;;;;;;;;;;:37;;;;;;;;;;;37777:2;37771:8;;;;;;;;;37696:95;;;37815:4;37801:19;;;;;;37366:462;;;;:::o;37210:148::-;37288:13;37321:29;37331:2;37335;37321:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:9;:29::i;:::-;37314:36;;37210:148;;;;:::o;24962:285::-;25147:16;25155:7;25147;:16::i;:::-;25118:45;;:25;25126:7;25135;25118;:25::i;:::-;:45;;;25110:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25193:46;25211:4;25217:2;25221:7;25230:4;25193:46;;;;;;;;;;;;:17;:46::i;:::-;24962:285;;;;;;:::o;32791:93::-;32869:7;32856:10;:20;;;;;;;;;;;;:::i;:::-;;32791:93;:::o;23702:162::-;23811:45;23828:4;23834:2;23838:7;23847:4;23811:45;;;;;;;;;;;;:16;:45::i;:::-;23702:162;;;;:::o;53481:229::-;53575:1;53555:22;;:8;:22;;;;53547:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53665:8;53636:38;;53657:6;;;;;;;;;;;53636:38;;;;;;;;;;;;53694:8;53685:6;;:17;;;;;;;;;;;;;;;;;;53481:229;:::o;29127:335::-;29213:1;29199:16;;:2;:16;;;;29191:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29272:16;29280:7;29272;:16::i;:::-;29271:17;29263:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29357:2;29334:11;:20;29346:7;29334:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;29370:33;:17;:21;29388:2;29370:21;;;;;;;;;;;;;;;:31;:33::i;:::-;29446:7;29442:2;29421:33;;29438:1;29421:33;;;;;;;;;;;;29127:335;;:::o;43961:186::-;44075:12;:16;44088:2;44075:16;;;;;;;;;;;;;;;:23;;;;44046:17;:26;44064:7;44046:26;;;;;;;;;;;:52;;;;44109:12;:16;44122:2;44109:16;;;;;;;;;;;;;;;44131:7;44109:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;44109:30:0;;;;;;;;;;;;;;;;;;;;;;43961:186;;:::o;44348:164::-;44452:10;:17;;;;44425:15;:24;44441:7;44425:24;;;;;;;;;;;:44;;;;44480:10;44496:7;44480:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;44480:24:0;;;;;;;;;;;;;;;;;;;;;;44348:164;:::o;35936:900::-;36068:13;36094:16;36119:2;36094:28;;36133:16;36158:2;36133:28;;36172:16;36197:2;36172:28;;36211:16;36236:2;36211:28;;36250:16;36275:2;36250:28;;36289:19;36374:3;:10;36361:3;:10;36348:3;:10;36335:3;:10;36322:3;:10;:23;:36;:49;:62;36311:74;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;36311:74:0;;;;36289:96;;36396:19;36424:5;36396:34;;36441:6;36450:1;36441:10;;36467:6;36476:1;36467:10;;36462:58;36483:3;:10;36479:1;:14;36462:58;;;36514:3;36518:1;36514:6;;;;;;;;;;;;;;;;36500;36507:3;;;;;;36500:11;;;;;;;;;;;:20;;;;;;;;;;;36495:3;;;;;;;36462:58;;;;36536:6;36545:1;36536:10;;36531:58;36552:3;:10;36548:1;:14;36531:58;;;36583:3;36587:1;36583:6;;;;;;;;;;;;;;;;36569;36576:3;;;;;;36569:11;;;;;;;;;;;:20;;;;;;;;;;;36564:3;;;;;;;36531:58;;;;36605:6;36614:1;36605:10;;36600:58;36621:3;:10;36617:1;:14;36600:58;;;36652:3;36656:1;36652:6;;;;;;;;;;;;;;;;36638;36645:3;;;;;;36638:11;;;;;;;;;;;:20;;;;;;;;;;;36633:3;;;;;;;36600:58;;;;36674:6;36683:1;36674:10;;36669:58;36690:3;:10;36686:1;:14;36669:58;;;36721:3;36725:1;36721:6;;;;;;;;;;;;;;;;36707;36714:3;;;;;;36707:11;;;;;;;;;;;:20;;;;;;;;;;;36702:3;;;;;;;36669:58;;;;36743:6;36752:1;36743:10;;36738:58;36759:3;:10;36755:1;:14;36738:58;;;36790:3;36794:1;36790:6;;;;;;;;;;;;;;;;36776;36783:3;;;;;;36776:11;;;;;;;;;;;:20;;;;;;;;;;;36771:3;;;;;;;36738:58;;;;36821:6;36807:21;;;;;;;;;;35936:900;;;;;;;:::o;26017:298::-;26147:38;26161:4;26167:2;26171:7;26180:4;26147:13;:38::i;:::-;26204:48;26227:4;26233:2;26237:7;26246:5;26204:22;:48::i;:::-;26196:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26017:298;;;;;:::o;24652:300::-;24789:41;24808:12;:10;:12::i;:::-;24822:7;24789:18;:41::i;:::-;24781:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24895:49;24913:4;24919:2;24923:7;24932:4;24938:5;24895:17;:49::i;:::-;24652:300;;;;;:::o;14781:91::-;14863:1;14845:7;:14;;;:19;;;;;;;;;;;14781:91;:::o;41928:271::-;42034:44;42054:4;42060:2;42064:7;42073:4;42034:19;:44::i;:::-;42091:47;42124:4;42130:7;42091:32;:47::i;:::-;42151:40;42179:2;42183:7;42151:27;:40::i;:::-;41928:271;;;;:::o;32082:358::-;32204:4;32231:15;:2;:13;;;:15::i;:::-;32226:60;;32270:4;32263:11;;;;32226:60;32298:13;32330:2;32314:36;;;32351:12;:10;:12::i;:::-;32365:4;32371:7;32380:5;32314:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;32314:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32314:72:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32314:72:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32314:72:0;;;;;;;;;;;;;;;;32298:88;;17148:10;32415:16;;32405:26;;;:6;:26;;;;32397:35;;;32082:358;;;;;;;:::o;27042:333::-;27127:4;27152:16;27160:7;27152;:16::i;:::-;27144:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27228:13;27244:16;27252:7;27244;:16::i;:::-;27228:32;;27290:5;27279:16;;:7;:16;;;:51;;;;27323:7;27299:31;;:20;27311:7;27299:11;:20::i;:::-;:31;;;27279:51;:87;;;;27334:32;27351:5;27358:7;27334:16;:32::i;:::-;27279:87;27271:96;;;27042:333;;;;:::o;30787:693::-;30921:4;30901:24;;:16;30909:7;30901;:16::i;:::-;:24;;;30893:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31004:1;30990:16;;:2;:16;;;;30982:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31096:10;31090:24;;;;;;;;;;;;;;;;31074:4;31068:18;:46;31060:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31224:10;31207:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;31207:28:0;;;31197:39;;;;;;31187:4;31170:22;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;31170:22:0;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;31170:22:0;;;31160:33;;;;;;:76;31152:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31274:23;31289:7;31274:14;:23::i;:::-;31310:35;:17;:23;31328:4;31310:23;;;;;;;;;;;;;;;:33;:35::i;:::-;31356:33;:17;:21;31374:2;31356:21;;;;;;;;;;;;;;;:31;:33::i;:::-;31425:2;31402:11;:20;31414:7;31402:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;31464:7;31460:2;31445:27;;31454:4;31445:27;;;;;;;;;;;;30787:693;;;;:::o;45139:1148::-;45405:22;45430:32;45460:1;45430:12;:18;45443:4;45430:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;45405:57;;45473:18;45494:17;:26;45512:7;45494:26;;;;;;;;;;;;45473:47;;45641:14;45627:10;:28;45623:328;;45672:19;45694:12;:18;45707:4;45694:18;;;;;;;;;;;;;;;45713:14;45694:34;;;;;;;;;;;;;;;;45672:56;;45778:11;45745:12;:18;45758:4;45745:18;;;;;;;;;;;;;;;45764:10;45745:30;;;;;;;;;;;;;;;:44;;;;45895:10;45862:17;:30;45880:11;45862:30;;;;;;;;;;;:43;;;;45623:328;;46040:12;:18;46053:4;46040:18;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:::i;:::-;;45139:1148;;;;:::o;11113:810::-;11173:4;11626:16;11653:19;11675:66;11653:88;;;;11844:7;11832:20;11820:32;;11884:3;11872:15;;:8;:15;;:42;;;;;11903:11;11891:8;:23;;11872:42;11864:51;;;;11113:810;;;:::o;32608:175::-;32708:1;32672:38;;:15;:24;32688:7;32672:24;;;;;;;;;;;;;;;;;;;;;:38;;;32668:108;;32762:1;32727:15;:24;32743:7;32727:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;32668:108;32608:175;:::o;14880:110::-;14961:21;14980:1;14961:7;:14;;;:18;;:21;;;;:::i;:::-;14944:7;:14;;:38;;;;14880:110;:::o;3186:136::-;3244:7;3271:43;3275:1;3278;3271:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;3264:50;;3186:136;;;;:::o;3659:192::-;3745:7;3778:1;3773;:6;;3781:12;3765:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3765:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3805:9;3821:1;3817;:5;3805:17;;3842:1;3835:8;;;3659:192;;;;;:::o;53721:4624::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}}},"deployment":{"address":"0xb09c96a5d9cbef4b42606ab8cc934b9f670ee02c","txhash":"0x7810137ef25482da8361bea12031c76ff95fc8d5e3695752f17ea16491e99da1","block":5946402,"constructorArgs":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000008430786464613866383031656161353639343530323930323564366566326263393962633064396664356239663938656333333665346634636662636338386433643435333731323564623434666164373531396366366461613761396234353838663434376538333839656435386637653430353061393134326266383939333763316300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a636865636b706f696e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014687474703a2f2f6c6f63616c686f73742e696f2f000000000000000000000000","chainid":4}},"metadata":{"categories":["solidity"]},"extra":{},"timestamp":"2020-02-22T10:05:38.000Z","pclassid":"0038d468-a2ea-4eb5-ba3c-a3977e0ac683"}]}]

export default treedata;
